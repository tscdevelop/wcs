// // services/t1m-task.service.ts
// import { EntityManager, Not, QueryFailedError, Repository } from "typeorm";
// import { AppDataSource } from "../config/app-data-source";
// import { ApiResponse } from "../models/api-response.model";
// import { Task } from '../entities/tasks.entity';
// import { TaskMrs } from '../entities/task_mrs.entity';
// import { MRS } from '../entities/mrs.entity';
// import { Aisle } from '../entities/aisle.entity';
// import { MrsLog } from '../entities/mrs_log.entity';
// import { StatusTasks, LogResult, MrsLogAction, AisleStatus, ControlSource, TaskMrsAction } from '../common/global.enum';
// import * as validate from '../utils/ValidationUtils';
// import * as lang from '../utils/LangHelper';
// import { MrsGateway } from '../gateways/mrs.gateway';
// import { CreateT1MTaskDto } from "../dtos/tasks.dto";
// import { TaskHistory } from "../entities/task_history.entity";

// export class T1MTaskService {
//     // NOTE: ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô transaction ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ useManager.getRepository(...) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
//     private taskRepository: Repository<Task>;
//     private taskMrsRepository: Repository<TaskMrs>;
//     private mrsRepository: Repository<MRS>;
//     private aisleRepository: Repository<Aisle>;
//     private mrsLogRepository: Repository<MrsLog>;

//     // ‡∏£‡∏±‡∏ö gateway ‡∏ú‡πà‡∏≤‡∏ô constructor
//     constructor(private gw: MrsGateway) {
//         this.taskRepository    = AppDataSource.getRepository(Task);
//         this.taskMrsRepository = AppDataSource.getRepository(TaskMrs);
//         this.mrsRepository     = AppDataSource.getRepository(MRS);
//         this.aisleRepository   = AppDataSource.getRepository(Aisle);
//         this.mrsLogRepository  = AppDataSource.getRepository(MrsLog);
//     }
    
//     private buildTodayPrefix(at = new Date()): string {
//         const y = at.getFullYear();
//         const m = String(at.getMonth() + 1).padStart(2, '0');
//         const d = String(at.getDate()).padStart(2, '0');
//         return `TID-${y}${m}${d}-`;  // e.g. TID-20250828-
//     }

//     private async issueNextTaskCode(manager: EntityManager): Promise<string> {
//         const prefix = this.buildTodayPrefix();

//         // üîí ‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏Å‡∏±‡∏ô
//         const rows = await manager.query(
//             `SELECT task_code
//             FROM tasks
//             WHERE task_code LIKE ?
//             ORDER BY task_code DESC
//             LIMIT 1
//             FOR UPDATE`,              // InnoDB ‡∏à‡∏∞‡∏£‡∏≠/‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
//             [`${prefix}%`]
//         );

//         let next = 1;
//         if (rows.length) {
//             const last: string = String(rows[0].task_code);
//             const tail = last.slice(prefix.length);       // "NNN"
//             const n = parseInt(tail, 10);
//             next = (isNaN(n) ? 0 : n) + 1;
//         }
//         return `${prefix}${String(next).padStart(3, '0')}`;
//     }

    

//     /**
//      * Flow: ‡∏£‡∏±‡∏ö SKU(T1M) -> resolve aisle -> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏à‡∏≠‡∏á MRS -> task_mrs OPEN(PENDING)+mrs_log(IN_PROGRESS) -> ‡∏¢‡∏¥‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á -> tasks.EXECUTING
//      * ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏£‡∏≠ event gateway -> onOpenFinished(...)
//      */
//     async createAndOpen(
//         data: CreateT1MTaskDto,
//         reqUsername: string,
//         manager?: EntityManager
//     ): Promise<ApiResponse<any>> {
//         let response = new ApiResponse<any>();
//         const operation = 'T1MTaskService.createAndOpen';

//         const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//         const useManager = manager || queryRunner?.manager;
//         if (!useManager) return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));

//         if (!manager && queryRunner) {
//             await queryRunner.connect();
//             await queryRunner.startTransaction();
//         }

//         try {
//             const taskRepo   = useManager.getRepository(Task);
//             const mrsRepo    = useManager.getRepository(MRS);
//             const tmRepo     = useManager.getRepository(TaskMrs);
//             const logRepo    = useManager.getRepository(MrsLog);

//             // ----- Validate -----
//             if (validate.isNullOrEmpty(data.sku))
//             return response.setIncomplete(lang.msgRequired('field.sku'));

//             // 1) resolve SKU -> aisle_id (T1M)
//             const resolved = await this.resolveSkuToAisleT1M(data.sku);
//             if (!resolved?.aisle_id)
//             return response.setIncomplete(lang.msg('validation.location_not_found_for_sku'));

//             const bankCode = resolved.bank_code ?? 'B1';

//             const code = await this.issueNextTaskCode(useManager);

//             // 2) create task
//             const task = Object.assign(new Task(), {
//                 task_code: code,
//                 sku: data.sku,
//                 qty: data.qty,
//                 priority: data.priority ?? 5,
//                 store_type: 'T1M',
//                 status: StatusTasks.NEW,
//                 requested_by: reqUsername,
//                 target_aisle_id: String(resolved.aisle_id),
//                 target_bank_code: bankCode,
//             });
//             await taskRepo.save(task);
//             // + logTaskEvent: ‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
//             await this.logTaskEvent(useManager, task, 'TASK_CREATED', {
//                 actor: reqUsername, source: 'API',
//                 next: StatusTasks.NEW, aisle_id: String(resolved.aisle_id), reason_code: null
//             });

//             // 2.1) ‡∏ï‡∏±‡πâ‡∏á order_id
//             const orderIdStr = data.order_id ?? String(task.task_id);
//             await taskRepo.update(
//                 { task_id: task.task_id },
//                 { order_id: orderIdStr, status: StatusTasks.ROUTING, updated_at: new Date() }
//             );
//             // + logTaskEvent: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ROUTING
//             await this.logTaskEvent(useManager, task, 'TASK_ROUTING', {
//                 prev: StatusTasks.NEW, next: StatusTasks.ROUTING,
//                 aisle_id: String(resolved.aisle_id), reason_code: null
//             });

//             // 2.2) NEW: ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á bank ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
//             const bankRows = await this.lockBankAndGetRows(bankCode, useManager);
//             const bankOpen = bankRows.find(r => (r as any).is_aisle_open && !(r as any).e_stop);

//             if (bankOpen) {
//                 // ‡∏°‡∏µ session ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô bank ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
//                 if (String(bankOpen.current_aisle_id) === String(resolved.aisle_id)) {
//                     // ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏µ‡πÉ‡∏ô aisle ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ flow JOIN_OPEN_SESSION ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
//                     // (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: findActiveOpenSession(resolved.aisle_id, ...) ‚Üí QUEUED + JOIN_OPEN_SESSION)
//                 } else {
//                     // ‡∏Ñ‡∏ô‡∏•‡∏∞ aisle ‡πÅ‡∏ï‡πà bank ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≠‡∏ô
//                     await taskRepo.update(
//                         { task_id: task.task_id },
//                         { status: StatusTasks.QUEUED, updated_at: new Date() }
//                     );
//                     // ‚¨áÔ∏è logTaskEvent ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞ return ‡∏≠‡∏≠‡∏Å‡πÄ‡∏•‡∏¢
//                     await this.logTaskEvent(useManager, task, 'QUEUED', {
//                         prev: StatusTasks.ROUTING,
//                         next: StatusTasks.QUEUED,
//                         reason_code: 'BANK_BUSY',               // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
//                         aisle_id: String(resolved.aisle_id),
//                         mrs_id: String((bankOpen as any).mrs_id) // ‡∏ñ‡πâ‡∏≤ entity ‡∏°‡∏µ mrs_id ‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ, ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡∏•‡∏∞‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏î‡πâ
//                     });
                    
//                     if (!manager && queryRunner) await queryRunner.commitTransaction();
//                         return response.setComplete(
//                         lang.msg('queued.item.t1m_task'),
//                         { queued: true, order_id: orderIdStr, task_id: task.task_id, bank_code: bankCode }
//                     );
//                 }
//             }

//             // 2.3) ‚≠ê ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô aisle ‡∏ô‡∏µ‡πâ ‚Üí ‡πÅ‡∏ô‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ session (‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ô aisle ‡πÄ‡∏î‡∏¥‡∏°)
//             const active = await this.findActiveOpenSession(resolved.aisle_id, useManager);
//             if (active) {
//                 await taskRepo.update(
//                     { task_id: task.task_id },
//                     { status: StatusTasks.QUEUED, updated_at: new Date() }
//                 );
//                 // + logTaskEvent: ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠ join session ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
//                 await this.logTaskEvent(useManager, task, 'QUEUED', {
//                     prev: StatusTasks.ROUTING, next: StatusTasks.QUEUED,
//                     reason_code: 'JOIN_OPEN_SESSION', aisle_id: String(resolved.aisle_id), mrs_id: String(active.mrs_id)
//                 });

//                 await logRepo.save(logRepo.create({
//                     mrs_id: String(active.mrs_id),
//                     aisle_id: String(resolved.aisle_id),
//                     task_id: String(task.task_id),
//                     action: MrsLogAction.JOIN_OPEN_SESSION as any,
//                     operator: ControlSource.AUTO,
//                     start_time: new Date(),
//                     result: LogResult.IN_PROGRESS
//                 }));

//                 this.extendSession(active);
//                 await mrsRepo.save(active);

//                 if (!manager && queryRunner) await queryRunner.commitTransaction();
//                 return response.setComplete(
//                     lang.msgSuccessAction('created', 'item.t1m_task'),
//                     {
//                     order_id: orderIdStr,
//                     task_id: task.task_id,
//                     aisle_id: String(resolved.aisle_id),
//                     mrs_id: active.mrs_id,
//                     joined_open_session: true
//                     }
//                 );
//             }

//             // 3) ‡πÑ‡∏°‡πà‡∏°‡∏µ session ‚Üí reserve MRS ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á OPEN
//             const device = await this.pickMrsForAisle(resolved.aisle_id, useManager);
//             if (!device) {
//                 await taskRepo.update({ task_id: task.task_id }, { status: StatusTasks.QUEUED, updated_at: new Date() });
//                 // + logTaskEvent: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
//                 await this.logTaskEvent(useManager, task, 'QUEUED', {
//                     prev: StatusTasks.ROUTING, next: StatusTasks.QUEUED,
//                     reason_code: 'NO_DEVICE', aisle_id: String(resolved.aisle_id)
//                 });

//                 if (!manager && queryRunner) 
//                     await queryRunner.commitTransaction();
//                 return response.setComplete(
//                     lang.msg('queued.item.t1m_task'),
//                     { queued: true, order_id: orderIdStr, task_id: task.task_id, bank_code: bankCode }
//                 );
//             }

//             device.current_task_id  = task.task_id as any;
//             device.current_aisle_id = String(resolved.aisle_id) as any;
//             device.is_available     = false;

//             // ‚≠ê mark session open
//             (device as any).is_aisle_open = true;
//             (device as any).open_session_aisle_id = String(resolved.aisle_id);
//             (device as any).open_session_order_id = orderIdStr;
//             this.extendSession(device);
//             await mrsRepo.save(device);

//             // 4) task_mrs OPEN (PENDING)
//             const openDetail = tmRepo.create({
//                 task_id: String(task.task_id),
//                 mrs_id: String(device.mrs_id),
//                 target_aisle_id: String(resolved.aisle_id),
//                 action: TaskMrsAction.OPEN,
//                 operator: ControlSource.AUTO,
//                 result: LogResult.PENDING,
//                 started_at: new Date(),
//             });
//             await tmRepo.save(openDetail);

//             // 5) mrs_log start (IN_PROGRESS)
//             await logRepo.save(logRepo.create({
//                 mrs_id: String(device.mrs_id),
//                 aisle_id: String(resolved.aisle_id),
//                 task_id: String(task.task_id),
//                 task_mrs_id: openDetail.id,
//                 action: MrsLogAction.OPEN_AISLE,
//                 operator: ControlSource.AUTO,
//                 start_time: new Date(),
//                 result: LogResult.IN_PROGRESS,
//             }));

//             // 6) send command
//             await this.gw.openAisle({
//                 mrs_id: device.mrs_id,
//                 aisle_id: Number(resolved.aisle_id),
//                 task_mrs_id: openDetail.id
//             });

//             // 7) tasks.EXECUTING
//             await taskRepo.update({ task_id: task.task_id }, { status: StatusTasks.EXECUTING, updated_at: new Date() });
//             // + logTaskEvent: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á
//             await this.logTaskEvent(useManager, task, 'TASK_EXECUTING', {
//                 prev: StatusTasks.ROUTING, next: StatusTasks.EXECUTING,
//                 mrs_id: String(device.mrs_id), aisle_id: String(resolved.aisle_id)
//             });

//             const result = {
//                 order_id: orderIdStr,
//                 task_id: task.task_id,
//                 aisle_id: String(resolved.aisle_id),
//                 mrs_id: device.mrs_id,
//                 task_mrs_open_id: openDetail.id,
//             };
//             response = response.setComplete(lang.msgSuccessAction('created', 'item.t1m_task'), result);

//             if (!manager && queryRunner) await queryRunner.commitTransaction();
//             return response;
//         } catch (error: any) {
//             if (!manager) await queryRunner?.rollbackTransaction();
//             console.error(operation, error);
//             throw new Error(lang.msgErrorFunction(operation, error.message));
//         } finally {
//             if (!manager) await queryRunner?.release();
//         }
//     }


//     /** ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ gateway ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (idempotent) -> WAIT_CONFIRM */
//     async onOpenFinished(
//         payload: { task_mrs_id: string; duration_ms?: number },
//         manager?: EntityManager
//     ): Promise<ApiResponse<any>> {
//         let response = new ApiResponse<any>();
//         const operation = 'T1MTaskService.onOpenFinished';

//         const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//         const useManager = manager || queryRunner?.manager;
//         if (!useManager) return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));

//         if (!manager && queryRunner) { await queryRunner.connect(); await queryRunner.startTransaction(); }

//         try {
//             const tmRepo    = useManager.getRepository(TaskMrs);
//             const logRepo   = useManager.getRepository(MrsLog);
//             const aisleRepo = useManager.getRepository(Aisle);
//             const taskRepo  = useManager.getRepository(Task);
//             const mrsRepo   = useManager.getRepository(MRS);

//             const detail = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
//             if (!detail) return response.setIncomplete(lang.msg('validation.not_found'));

//             if (detail.action !== TaskMrsAction.OPEN) {
//                 return response.setIncomplete(lang.msg('validation.invalid_action_for_handler'));
//             }

//             // idempotent guard
//             if (detail.result === LogResult.SUCCESS) {
//             if (!manager && queryRunner) await queryRunner.commitTransaction();
//                 return response.setComplete(lang.msgSuccessAction('updated', 'item.task_mrs'), { task_mrs_id: detail.id });
//             }

//             const now = new Date();

//             // ‡∏õ‡∏¥‡∏î task_mrs (OPEN) ‡πÄ‡∏õ‡πá‡∏ô SUCCESS
//             detail.finished_at      = now;
//             detail.result           = LogResult.SUCCESS;
//             detail.open_duration_ms = payload.duration_ms;
//             await tmRepo.save(detail);

//             // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡πà‡∏≠‡∏á
//             await aisleRepo.update(
//                 { aisle_id: detail.target_aisle_id },
//                 { status: AisleStatus.OPEN as any, last_opened_at: now, last_event_at: now }
//             );

//             // ‡∏õ‡∏¥‡∏î log ‡∏î‡πâ‡∏ß‡∏¢ task_mrs_id ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
//             await logRepo.update(
//                 { task_mrs_id: String(detail.id) },
//                 { end_time: now, task_duration: payload.duration_ms ?? null, result: LogResult.SUCCESS }
//             );

//             // ‚≠ê ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô session ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô MRS + ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏
//             const device = await mrsRepo.findOne({ where: { mrs_id: detail.mrs_id as any } });
//             if (device) {
//                 (device as any).is_aisle_open = true;
//                 (device as any).open_session_aisle_id = String(detail.target_aisle_id);
//                 this.extendSession(device);
//                 await mrsRepo.save(device);
//             }

//             // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
//             await taskRepo.update(
//                 { task_id: detail.task_id },
//                 { status: StatusTasks.WAIT_CONFIRM, updated_at: now }
//             );
//             // + logTaskEvent: ‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
//             const t = await taskRepo.findOne({ where: { task_id: detail.task_id } });
//             if (t) {
//                 await this.logTaskEvent(useManager, t, 'TASK_WAIT_CONFIRM', {
//                     prev: StatusTasks.EXECUTING, next: StatusTasks.WAIT_CONFIRM,
//                     mrs_id: String(detail.mrs_id), aisle_id: String(detail.target_aisle_id)
//                 });
//             }

//             response = response.setComplete(lang.msgSuccessAction('updated', 'item.task_mrs'), { task_mrs_id: detail.id });
//             if (!manager && queryRunner) await queryRunner.commitTransaction();
//             return response;
//         } catch (error: any) {
//             if (!manager) await queryRunner?.rollbackTransaction();
//             console.error(operation, error);
//             throw new Error(lang.msgErrorFunction(operation, error.message));
//         } finally {
//             if (!manager) await queryRunner?.release();
//         }
//     }


//     /**
//      * ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô -> ‡∏ï‡∏£‡∏ß‡∏à sensor; ‡∏ñ‡πâ‡∏≤ clear: ‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà clear: discard (log ‡πÑ‡∏ß‡πâ) ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á WAIT_CONFIRM
//      */
//     async closeAfterConfirm(
//         task_id: string,
//         reqUsername: string,
//         manager?: EntityManager
//     ): Promise<ApiResponse<any>> {
//         let response = new ApiResponse<any>();
//         const operation = 'T1MTaskService.closeAfterConfirm';

//         const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//         const useManager = manager || queryRunner?.manager;
//         if (!useManager) return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));

//         if (!manager && queryRunner) { await queryRunner.connect(); await queryRunner.startTransaction(); }

//         try {
//             const taskRepo = useManager.getRepository(Task);
//             const tmRepo   = useManager.getRepository(TaskMrs);
//             const logRepo  = useManager.getRepository(MrsLog);
//             const mrsRepo  = useManager.getRepository(MRS);

//             const task = await taskRepo.findOne({ where: { task_id } });
//             if (!task) return response.setIncomplete(lang.msg('validation.not_found'));

//             // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≠‡∏ö OPEN ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
//             const lastOpen = await tmRepo.findOne({
//             where: { task_id: String(task_id), action: TaskMrsAction.OPEN as any },
//             order: { started_at: 'DESC' }
//             });
//             if (!lastOpen) return response.setIncomplete(lang.msg('validation.not_found'));
//             // + logTaskEvent: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏¢‡∏¥‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
//             await this.logTaskEvent(useManager, task, 'USER_CONFIRM', {
//                 actor: reqUsername, source: 'API',
//                 mrs_id: String(lastOpen.mrs_id), aisle_id: String(lastOpen.target_aisle_id)
//             });

//             // 1) sensor ‡∏ï‡πâ‡∏≠‡∏á clear
//             const sensorClear = await this.isAisleSensorClear(lastOpen.target_aisle_id);
//             if (!sensorClear) {
//                 // + logTaskEvent: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ sensor
//                 await this.logTaskEvent(useManager, task, 'USER_CONFIRM_BLOCKED', {
//                     prev: StatusTasks.WAIT_CONFIRM, next: StatusTasks.WAIT_CONFIRM,
//                     reason_code: 'SENSOR_BLOCKED', aisle_id: String(lastOpen.target_aisle_id), mrs_id: String(lastOpen.mrs_id)
//                 });
//                 await logRepo.save(logRepo.create({
//                     mrs_id: lastOpen.mrs_id,
//                     aisle_id: lastOpen.target_aisle_id,
//                     task_id: String(task_id),
//                     action: MrsLogAction.CLOSE_AISLE,
//                     operator: ControlSource.AUTO,
//                     start_time: new Date(),
//                     end_time: new Date(),
//                     result: LogResult.DISCARDED,
//                     error_msg: 'Sensor detects object; discard close',
//                 } as any));
//                 await taskRepo.update({ task_id }, { status: StatusTasks.WAIT_CONFIRM, updated_at: new Date() });
//                 if (!manager && queryRunner) await queryRunner.commitTransaction();
//                 return response.setIncomplete(lang.msg('validation.sensor_detect_object_discard_close'));
//             }

//             const now = new Date();

//             // 2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à preempt
//             const device   = await mrsRepo.findOne({ where: { mrs_id: lastOpen.mrs_id as any } });  // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠ session
//             const bankCode = device?.bank_code ?? 'B1';

//             const [topSameAisle, topInBank] = await Promise.all([
//                 this.getNextTaskSameAisle(lastOpen.target_aisle_id, useManager), // QUEUED ‡πÉ‡∏ô aisle ‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority/‡πÄ‡∏ß‡∏•‡∏≤/‡πÑ‡∏≠‡∏î‡∏µ)
//                 this.getTopQueuedInBank(bankCode, useManager),                   // QUEUED ‡∏ó‡∏±‡πâ‡∏á bank
//             ]);

//             // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô bank ‡∏°‡∏µ‡∏á‡∏≤‡∏ô priority ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡∏•‡∏∞ aisle ‚Üí ‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (preempt)
//             const shouldPreempt =
//             !!topInBank &&
//             (!topSameAisle || (
//                 topInBank.priority > topSameAisle.priority &&
//                 String(topInBank.target_aisle_id) !== String(lastOpen.target_aisle_id)
//             ));

//             // 3) ‡πÑ‡∏°‡πà preempt ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÉ‡∏ô aisle ‡πÄ‡∏î‡∏¥‡∏° ‚Üí ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
//             if (!shouldPreempt && topSameAisle && device) {
//                 // ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô DONE
//                 await taskRepo.update({ task_id }, { status: StatusTasks.DONE, updated_at: now });
//                 // + logTaskEvent: ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏ö
//                 await this.logTaskEvent(useManager, task, 'TASK_DONE', {
//                     prev: StatusTasks.WAIT_CONFIRM, next: StatusTasks.DONE,
//                     aisle_id: String(lastOpen.target_aisle_id), mrs_id: String(device.mrs_id)
//                 });

//                 // ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ï‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô WAIT_CONFIRM + ‡∏¢‡∏∂‡∏î device ‡∏ï‡πà‡∏≠ (‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á)
//                 await taskRepo.update(
//                     { task_id: topSameAisle.task_id },
//                     { status: StatusTasks.WAIT_CONFIRM, updated_at: now }
//                 );
//                  // + logTaskEvent: ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ï‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡∏Ç‡πâ‡∏≤‡∏° EXECUTING ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á)
//                 const next = await taskRepo.findOne({ where: { task_id: topSameAisle.task_id } });
//                 if (next) {
//                     await this.logTaskEvent(useManager, next, 'TASK_WAIT_CONFIRM', {
//                     prev: StatusTasks.QUEUED, next: StatusTasks.WAIT_CONFIRM,
//                     reason_code: 'CONTINUE_IN_OPEN_SESSION', aisle_id: String(next.target_aisle_id), mrs_id: String(device.mrs_id)
//                     });
//                 }

//                 device.current_task_id = topSameAisle.task_id as any;
//                 (device as any).is_aisle_open = true;
//                 this.extendSession(device);
//                 await mrsRepo.save(device);

//                 // ‡∏™‡∏£‡πâ‡∏≤‡∏á task_mrs OPEN (synthetic) ‡πÉ‡∏´‡πâ task ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
//                 let tmOpen = await tmRepo.findOne({
//                     where: { task_id: String(topSameAisle.task_id), action: TaskMrsAction.OPEN as any },
//                     order: { started_at: 'DESC' }
//                 });
//                 if (!tmOpen) {
//                     tmOpen = tmRepo.create({
//                         task_id: String(topSameAisle.task_id),
//                         mrs_id: String(device.mrs_id),
//                         target_aisle_id: String(topSameAisle.target_aisle_id),
//                         action: TaskMrsAction.OPEN,
//                         operator: ControlSource.AUTO,
//                         result: LogResult.SUCCESS, // session ‡πÄ‡∏î‡∏¥‡∏° ‚Üí success ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
//                         started_at: now,
//                         finished_at: now,
//                         open_duration_ms: 0,
//                     });
//                     await tmRepo.save(tmOpen);

//                     await logRepo.save(logRepo.create({
//                         mrs_id: String(device.mrs_id),
//                         aisle_id: String(topSameAisle.target_aisle_id),
//                         task_id: String(topSameAisle.task_id),
//                         task_mrs_id: tmOpen.id,
//                         action: MrsLogAction.CONTINUE_IN_OPEN_SESSION,   // ‡∏°‡∏µ‡πÉ‡∏ô enum
//                         operator: ControlSource.AUTO,
//                         start_time: now,
//                         result: LogResult.IN_PROGRESS,
//                     }));
//                 }

//                 if (!manager && queryRunner) await queryRunner.commitTransaction();
//                 return response.setComplete(
//                     lang.msg('continue_in_open_session'),
//                     { continued: true, next_task_id: topSameAisle.task_id, aisle_id: String(lastOpen.target_aisle_id) }
//                 );
//             }

//             // 4) preempt (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô same-aisle) ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á CLOSE ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î
//             const closeDetail = tmRepo.create({
//                 task_id: String(task_id),
//                 mrs_id: lastOpen.mrs_id,
//                 target_aisle_id: lastOpen.target_aisle_id,
//                 action: TaskMrsAction.CLOSED, // ‚ö† ‡πÉ‡∏´‡πâ enum/string ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö onCloseFinished
//                 operator: ControlSource.AUTO,
//                 result: LogResult.PENDING,
//                 started_at: now,
//             });
//             await tmRepo.save(closeDetail);

//             await logRepo.save(logRepo.create({
//                 mrs_id: lastOpen.mrs_id,
//                 aisle_id: lastOpen.target_aisle_id,
//                 task_id: String(task_id),
//                 action: MrsLogAction.CLOSE_AISLE,
//                 operator: ControlSource.AUTO,
//                 start_time: now,
//                 result: LogResult.IN_PROGRESS,
//             }));

//             await this.gw.closeAisle({
//                 mrs_id: Number(lastOpen.mrs_id),
//                 aisle_id: Number(lastOpen.target_aisle_id),
//                 task_mrs_id: closeDetail.id,
//             });

//             await taskRepo.update({ task_id }, { status: StatusTasks.CLOSING, updated_at: now });

//             // + logTaskEvent: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á
//             await this.logTaskEvent(useManager, task, 'TASK_CLOSING', {
//                 prev: StatusTasks.WAIT_CONFIRM, next: StatusTasks.CLOSING,
//                 aisle_id: String(lastOpen.target_aisle_id), mrs_id: String(lastOpen.mrs_id),
//                 reason_code: shouldPreempt ? 'PREEMPT' : 'NO_NEXT_SAME_AISLE'
//             });

//             response = response.setComplete(
//                 lang.msgSuccessAction('updated', 'item.t1m_task'),
//                 { task_mrs_close_id: closeDetail.id, closed: true, preempted: shouldPreempt }
//             );
//             if (!manager && queryRunner) await queryRunner.commitTransaction();
//             return response;

//         } catch (error: any) {
//             if (!manager) await queryRunner?.rollbackTransaction();
//             console.error(operation, error);
//             throw new Error(lang.msgErrorFunction(operation, error.message));
//         } finally {
//             if (!manager) await queryRunner?.release();
//         }
//     }

//     /** ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (idempotent) -> DONE + ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á */
//     async onCloseFinished(
//         payload: { task_mrs_id: string; duration_ms?: number },
//         manager?: EntityManager
//         ): Promise<ApiResponse<any>> {
//         let response = new ApiResponse<any>();
//         const operation = 'T1MTaskService.onCloseFinished';

//         const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//         const useManager = manager || queryRunner?.manager;
//         if (!useManager) return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));

//         if (!manager && queryRunner) { await queryRunner.connect(); await queryRunner.startTransaction(); }

//         try {
//             const tmRepo    = useManager.getRepository(TaskMrs);
//             const logRepo   = useManager.getRepository(MrsLog);
//             const taskRepo  = useManager.getRepository(Task);
//             const aisleRepo = useManager.getRepository(Aisle);
//             const mrsRepo   = useManager.getRepository(MRS);

//             const detail = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
//             if (!detail) return response.setIncomplete(lang.msg('validation.not_found'));

//             if (detail.action !== TaskMrsAction.CLOSED) {
//             return response.setIncomplete(lang.msg('validation.invalid_action_for_handler'));
//             }

//             const now = new Date();

//             // ---------- Idempotent: ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ----------
//             // idempotent: ‡πÄ‡∏Ñ‡∏¢ SUCCESS ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ensure task DONE ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å
//             if (detail.result === LogResult.SUCCESS) {
//                 await taskRepo.update({ task_id: detail.task_id }, { status: StatusTasks.DONE, updated_at: now });
                
//                  // TASK_HISTORY: ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (idempotent) + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ DONE
//                 const taskEnt = await taskRepo.findOne({ where: { task_id: detail.task_id } });
//                 if (taskEnt) {
//                     await this.logTaskEvent(useManager, taskEnt, 'CLOSE_ALREADY_SUCCESS', {
//                     prev: StatusTasks.CLOSING, next: StatusTasks.DONE,
//                     aisle_id: String(detail.target_aisle_id),
//                     mrs_id: String(detail.mrs_id),
//                     reason_code: 'CLOSE_FINISHED_CALLBACK_DUP'
//                     });
//                 }
                
//                 if (!manager && queryRunner) await queryRunner.commitTransaction();
//                 // dispatch ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô bank ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
//                 const devForDispatch = await mrsRepo.findOne({ where: { mrs_id: detail.mrs_id as any } });
//                 const aisleRow = await aisleRepo.findOne({ where: { aisle_id: String(detail.target_aisle_id) } });
//                 const bankForDispatch = devForDispatch?.bank_code ?? aisleRow?.bank_code;
//                 if (bankForDispatch) await this.dispatchNextForBank(bankForDispatch);

//                 return response.setComplete(lang.msgSuccessAction('updated', 'item.task_mrs'), { task_mrs_id: detail.id });
//             }

//             // ---------- ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ----------
//             // ‡∏õ‡∏¥‡∏î task_mrs (CLOSE) ‡πÄ‡∏õ‡πá‡∏ô SUCCESS
//             detail.finished_at       = now;
//             detail.result            = LogResult.SUCCESS;
//             detail.close_duration_ms = payload.duration_ms;
//             await tmRepo.save(detail);

//             // ‡∏õ‡∏¥‡∏î log
//             await logRepo.update(
//                 { task_mrs_id: String(detail.id) },
//                 { end_time: now, task_duration: payload.duration_ms ?? null, result: LogResult.SUCCESS }
//             );

//             // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô CLOSED
//             await aisleRepo.update(
//                 { aisle_id: detail.target_aisle_id },
//                 { status: AisleStatus.CLOSED as any, last_closed_at: now, last_event_at: now }
//             );

//             // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á + reset session flags
//             const device = await mrsRepo.findOne({ where: { current_task_id: detail.task_id } });
//             const bankCode = device?.bank_code;
//             if (device) {
//                 device.current_task_id  = null as any;
//                 device.current_aisle_id = null as any;
//                 device.is_available     = true;
                
//                 (device as any).is_aisle_open = false;
//                 (device as any).open_session_aisle_id = null;
//                 (device as any).open_session_order_id = null;
//                 (device as any).open_session_expires_at = null;
//                 await mrsRepo.save(device);
//             }

//             // ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°
//             await taskRepo.update({ task_id: detail.task_id }, { status: StatusTasks.DONE, updated_at: now });

//             // TASK_HISTORY: ‡πÉ‡∏™‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ù‡∏±‡πà‡∏á task ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö
//             const taskEnt = await taskRepo.findOne({ where: { task_id: detail.task_id } });
//             if (taskEnt) {
//                 // 1) ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//                 await this.logTaskEvent(useManager, taskEnt, 'CLOSE_SUCCESS', {
//                     prev: StatusTasks.CLOSING, next: StatusTasks.DONE,
//                     aisle_id: String(detail.target_aisle_id),
//                     mrs_id: String(detail.mrs_id),
//                     reason_code: 'CLOSE_FINISHED'
//                 });

//                 // 2) ‡∏à‡∏ö‡∏á‡∏≤‡∏ô (DONE)
//                 await this.logTaskEvent(useManager, taskEnt, 'TASK_DONE', {
//                     prev: StatusTasks.CLOSING, next: StatusTasks.DONE,
//                 });

//                 // 3) ‡∏õ‡∏¥‡∏î session (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ device)
//                 if (device) {
//                     await this.logTaskEvent(useManager, taskEnt, 'SESSION_CLOSED', {
//                     aisle_id: String(detail.target_aisle_id),
//                     mrs_id: String(device.mrs_id),
//                     source: 'onCloseFinished'
//                     });
//                 }
//             }

//             response = response.setComplete(lang.msgSuccessAction('updated', 'item.task_mrs'), { task_mrs_id: detail.id });
//             if (!manager && queryRunner) await queryRunner.commitTransaction();

//             // ‚úÖ ‡∏´‡∏•‡∏±‡∏á commit ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢ dispatch ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô bank ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
//             if (bankCode) await this.dispatchNextForBank(bankCode);
//             return response;
//         } catch (error: any) {
//             if (!manager) await queryRunner?.rollbackTransaction();
//             console.error(operation, error);
//             throw new Error(lang.msgErrorFunction(operation, error.message));
//         } finally {
//             if (!manager) await queryRunner?.release();
//         }
//     }


    


// // ============== EVENTS: ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ / ‡πÄ‡∏™‡∏£‡∏¥‡∏° ==============

//     /** MRS ‡πÅ‡∏à‡πâ‡∏á‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á (idempotent) */
//     async onBlocked(payload: { task_mrs_id: string; reason?: string }, manager?: EntityManager) {
//         const em = manager ?? AppDataSource.manager;
//         const tmRepo  = em.getRepository(TaskMrs);
//         const logRepo = em.getRepository(MrsLog);

//         const d = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
//         if (!d) return new ApiResponse().setIncomplete(lang.msg('validation.not_found'));

//         // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ß action ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
//         d.blocked_flag = true as any;
//         d.blocked_reason = payload.reason ?? 'BLOCKED';
//         // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≠‡∏ô‡∏à‡∏∞‡∏õ‡∏¥‡∏î ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ discard (‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ fail)
//         await tmRepo.save(d);

//         // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏∑‡∏ö‡πÄ‡∏´‡∏ï‡∏∏
//         await logRepo.save(logRepo.create({
//         mrs_id: d.mrs_id, aisle_id: d.target_aisle_id, task_id: String(d.task_id),
//         action: d.action === 'CLOSED' ? ('CLOSE_AISLE' as any) : ('OPEN_AISLE' as any),
//         start_time: new Date(), end_time: new Date(),
//         result: LogResult.DISCARDED,
//         error_msg: payload.reason,
//         operator: d.operator as any,
//         }));

//         return new ApiResponse().setComplete(lang.msgSuccessAction('updated', 'item.task_mrs'), { task_mrs_id: d.id });
//     }

    


//     /** Fault ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á/‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏• -> mark FAILED */
//     async onFault(payload: { mrs_id: number; code?: string; msg?: string; task_mrs_id?: string }, manager?: EntityManager) {
//         const em = manager ?? AppDataSource.manager;
//         const mrsRepo = em.getRepository(MRS);
//         const tmRepo  = em.getRepository(TaskMrs);
//         const taskRepo= em.getRepository(Task);
//         const logRepo = em.getRepository(MrsLog);

//         const mrs = await mrsRepo.findOne({ where: { mrs_id: payload.mrs_id } });
//         if (mrs) { mrs.fault_msg = payload.msg ?? payload.code ?? 'FAULT'; await mrsRepo.save(mrs); }

//         if (payload.task_mrs_id) {
//         const d = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
//         if (d && d.result !== LogResult.SUCCESS) {
//             d.result = LogResult.FAIL;
//             d.finished_at = new Date();
//             await tmRepo.save(d);

//             // ‡∏õ‡∏¥‡∏î log
//             await logRepo.createQueryBuilder()
//             .update(MrsLog)
//             .set({ end_time: new Date(), result: LogResult.FAIL, error_code: payload.code, error_msg: payload.msg })
//             .where('task_id = :t AND aisle_id = :a AND action = :act', { t: d.task_id, a: d.target_aisle_id, act: d.action === 'OPEN' ? 'OPEN_AISLE' : 'CLOSE_AISLE' })
//             .execute();

//             await taskRepo.update({ task_id: d.task_id }, { status: StatusTasks.FAILED, updated_at: new Date(), error_code: payload.code as any, error_msg: payload.msg as any });
//         }
//         }

//         return new ApiResponse().setComplete(lang.msgSuccessAction('updated', 'item.mrs'), {});
//     }

//     /** Timeout ‡∏Ç‡∏≠‡∏á action ‡πÉ‡∏î‡πÜ */
//     async onTimeout(payload: { task_mrs_id: string }, manager?: EntityManager) {
//         const em = manager ?? AppDataSource.manager;
//         const tmRepo  = em.getRepository(TaskMrs);
//         const logRepo = em.getRepository(MrsLog);
//         const taskRepo= em.getRepository(Task);

//         const d = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
//         if (!d) return new ApiResponse().setIncomplete(lang.msg('validation.not_found'));

//         if (d.result === LogResult.SUCCESS) return new ApiResponse().setComplete(lang.msg('common.already_completed'), {});

//         d.retry_count = (d.retry_count ?? 0) + 1;
//         d.result = LogResult.FAIL; // ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á TIMEOUT ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡πá‡πÑ‡∏î‡πâ
//         d.finished_at = new Date();
//         await tmRepo.save(d);

//         await logRepo.createQueryBuilder()
//         .update(MrsLog)
//         .set({ end_time: new Date(), result: LogResult.FAIL, error_msg: 'TIMEOUT' })
//         .where('task_id = :t AND aisle_id = :a AND action = :act', { t: d.task_id, a: d.target_aisle_id, act: d.action === 'OPEN' ? 'OPEN_AISLE' : 'CLOSE_AISLE' })
//         .execute();

//         await taskRepo.update({ task_id: d.task_id }, { status: StatusTasks.FAILED, updated_at: new Date(), error_code: 'TIMEOUT' as any, error_msg: 'Action timeout' as any });

//         return new ApiResponse().setComplete(lang.msg('common.timeout'), {});
//     }

// // ============== MANUAL OVERRIDE ==============

//     /** ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö manual (‡∏™‡∏£‡πâ‡∏≤‡∏á ad-hoc task ‡πÄ‡∏û‡∏∑‡πà‡∏≠ audit) */
//     // async manualOpen(aisle_id: string, reqUser: string, note?: string, manager?: EntityManager) {
//     //     const response = new ApiResponse<any>();
//     //     const operation = 'T1MTaskService.manualOpen';

//     //     const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//     //     const em = manager || queryRunner?.manager;
//     //     if (!em) return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));

//     //     if (!manager && queryRunner) { await queryRunner.connect(); await queryRunner.startTransaction(); }

//     //     try {
//     //     const taskRepo = em.getRepository(Task);
//     //     const mrsRepo  = em.getRepository(MRS);
//     //     const tmRepo   = em.getRepository(TaskMrs);
//     //     const logRepo  = em.getRepository(MrsLog);

//     //     // 1) reserve device
//     //     const device = await this.pickMrsForAisle(aisle_id, em);
//     //     if (!device) return response.setIncomplete(lang.msg('validation.no_available_mrs'));

//     //     // 2) ad-hoc task
//     //     const task = await taskRepo.save(taskRepo.create({
//     //         order_id: `MANUAL-${new Date().toISOString()}`,  //‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç roder_id
//     //         sku: 'MANUAL',
//     //         priority: 5,
//     //         store_type: 'T1M',
//     //         status: StatusTasks.EXECUTING,
//     //         requested_by: reqUser,
//     //     }));

//     //     device.current_task_id  = task.task_id as any;
//     //     device.current_aisle_id = String(aisle_id) as any;
//     //     device.is_available     = false;
//     //     await mrsRepo.save(device);

//     //     // 3) OPEN detail + log
//     //     const openDetail = await tmRepo.save(tmRepo.create({
//     //         task_id: task.task_id,
//     //         mrs_id: String(device.mrs_id),
//     //         target_aisle_id: String(aisle_id),
//     //         action: AisleStatus.OPEN,
//     //         operator: ControlSource.MANUAL,
//     //         result: LogResult.PENDING,
//     //         started_at: new Date(),
//     //         // control_params_json: { operator_note: note } as any, // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
//     //     }));

//     //     await logRepo.save(logRepo.create({
//     //         mrs_id: String(device.mrs_id),
//     //         aisle_id: String(aisle_id),
//     //         task_id: String(task.task_id),
//     //         action: MrsLogAction.OPEN_AISLE,
//     //         operator: ControlSource.MANUAL,
//     //         start_time: new Date(),
//     //         result: LogResult.IN_PROGRESS,
//     //         // error_msg: note,
//     //     }));

//     //     await this.gw.openAisle({ mrs_id: device.mrs_id, aisle_id: Number(aisle_id), task_mrs_id: openDetail.id });

//     //     if (!manager && queryRunner) await queryRunner.commitTransaction();
//     //     return response.setComplete(lang.msgSuccessAction('created', 'item.t1m_task'), { task_id: task.task_id, task_mrs_open_id: openDetail.id, mrs_id: device.mrs_id });
//     //     } catch (e:any) {
//     //     if (!manager) await queryRunner?.rollbackTransaction();
//     //     throw new Error(lang.msgErrorFunction(operation, e.message));
//     //     } finally {
//     //     if (!manager) await queryRunner?.release();
//     //     }
//     // }

//     /** ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö manual (force ‡πÑ‡∏î‡πâ‚Äî‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à sensor ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà force) */
//     async manualClose(aisle_id: string, reqUser: string, opts?: { force?: boolean; note?: string }, manager?: EntityManager) {
//         const response = new ApiResponse<any>();
//         const operation = 'T1MTaskService.manualClose';

//         const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//         const em = manager || queryRunner?.manager;
//         if (!em) return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
//         if (!manager && queryRunner) { await queryRunner.connect(); await queryRunner.startTransaction(); }

//         try {
//         const tmRepo   = em.getRepository(TaskMrs);
//         const taskRepo = em.getRepository(Task);
//         const logRepo  = em.getRepository(MrsLog);

//         // ‡∏´‡∏≤ OPEN ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
//         const open = await tmRepo.findOne({ where: { target_aisle_id: String(aisle_id), action: 'OPEN' as any }, order: { started_at: 'DESC' } });
//         if (!open) return response.setIncomplete(lang.msg('validation.not_found'));

//         if (!(opts?.force)) {
//             const sensorClear = await this.isAisleSensorClear(aisle_id);
//             if (!sensorClear) {
//             await logRepo.save(logRepo.create({
//                 mrs_id: open.mrs_id, 
//                 aisle_id: String(aisle_id), 
//                 task_id: String(open.task_id),
//                 action: MrsLogAction.CLOSE_AISLE, 
//                 operator: ControlSource.MANUAL, 
//                 start_time: new Date(), 
//                 end_time: new Date(),
//                 result: LogResult.DISCARDED, 
//                 error_msg: 'Sensor detects object (manual)',
//             }));
//             await taskRepo.update({ task_id: open.task_id }, { status: StatusTasks.WAIT_CONFIRM, updated_at: new Date() });
//             return response.setIncomplete(lang.msg('validation.sensor_detect_object_discard_close'));
//             }
//         }

//         // insert CLOSE (MANUAL) + log ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
//         const closeDetail = await tmRepo.save(tmRepo.create({
//             task_id: open.task_id, 
//             mrs_id: open.mrs_id, 
//             target_aisle_id: open.target_aisle_id,
//             action: TaskMrsAction.CLOSED, 
//             operator: ControlSource.MANUAL, 
//             result: LogResult.PENDING, 
//             started_at: new Date(),
//         }));

//         await logRepo.save(logRepo.create({
//             mrs_id: closeDetail.mrs_id, 
//             aisle_id: closeDetail.target_aisle_id, 
//             task_id: String(closeDetail.task_id),
//             action: MrsLogAction.CLOSE_AISLE, 
//             operator: ControlSource.MANUAL, 
//             start_time: new Date(), 
//             result: LogResult.IN_PROGRESS,
//         }));

//         await this.gw.closeAisle({ mrs_id: Number(closeDetail.mrs_id), aisle_id: Number(closeDetail.target_aisle_id), task_mrs_id: closeDetail.id });
//         await taskRepo.update({ task_id: closeDetail.task_id }, { status: StatusTasks.CLOSING, updated_at: new Date() });

//         if (!manager && queryRunner) await queryRunner.commitTransaction();
//         return response.setComplete(lang.msgSuccessAction('updated', 'item.t1m_task'), { task_mrs_close_id: closeDetail.id });
//         } catch (e:any) {
//         if (!manager) await queryRunner?.rollbackTransaction();
//         throw new Error(lang.msgErrorFunction(operation, e.message));
//         } finally {
//         if (!manager) await queryRunner?.release();
//         }
//     }

//     /** ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á bank ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */
//     private async lockBankAndGetRows(bank: string, em: EntityManager) {
//         const mrsRepo = em.getRepository(MRS);
//         // ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á bank ‡∏ô‡∏µ‡πâ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡πá‡∏ô ‚Äú‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‚Äù ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
//         const rows = await mrsRepo.createQueryBuilder('m')
//             .setLock('pessimistic_write')       // SELECT ... FOR UPDATE
//             .where('m.bank_code = :bank', { bank })
//             .getMany();
//         return rows;
//     }

//     /** ‡πÄ‡∏Å‡πá‡∏ö ‚Äú‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‚Äù ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏≠‡∏õ: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô, ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */
//     private async logTaskEvent(
//         manager: EntityManager,
//         task: Task,
//         event: string,
//         params?: {
//             actor?: string | null;
//             source?: string | null;
//             mrs_id?: string | number | null;
//             aisle_id?: string | number | null;
//             reason_code?: string | null;
//             meta?: any;
//             prev?: StatusTasks | string | null;
//             next?: StatusTasks | string | null;
//         }
//     ): Promise<void> {
//         const repo = manager.getRepository(TaskHistory);

//         await repo.insert({
//             task_id: String(task.task_id),
//             event,
//             prev_status: params?.prev ?? null,
//             new_status: params?.next ?? null,
//             actor: params?.actor ?? null,
//             source: params?.source ?? null,
//             mrs_id: params?.mrs_id != null ? String(params.mrs_id) : null,
//             aisle_id: params?.aisle_id != null ? String(params.aisle_id) : null,
//             reason_code: params?.reason_code ?? null,
//             meta_json: params?.meta ?? null,
//         });
//     }

// // ============== HELPERS ==============

//     private async dispatchNextForBank(bank: string, manager?: EntityManager) {
//         const operation = 'T1MTaskService.dispatchNextForBank';
//         const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//         const useManager = manager || queryRunner?.manager;
//         if (!useManager) return;

//         if (!manager && queryRunner) { await queryRunner.connect(); await queryRunner.startTransaction(); }

//         try {
//             const mrsRepo  = useManager.getRepository(MRS);
//             const taskRepo = useManager.getRepository(Task);
//             const tmRepo   = useManager.getRepository(TaskMrs);
//             const logRepo  = useManager.getRepository(MrsLog);

//             // 1) ‡∏´‡∏≤ device ‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô bank ‡∏ô‡∏µ‡πâ
//             const device = await mrsRepo.createQueryBuilder('m')
//                 .setLock('pessimistic_write')
//                 .where('m.bank_code = :bank', { bank })
//                 .andWhere('m.is_available = 1')
//                 .andWhere('m.e_stop = 0')
//                 .orderBy('COALESCE(m.last_heartbeat_at, m.last_update)', 'DESC')
//                 .getOne();

//             if (!device) { if (!manager && queryRunner) await queryRunner.commitTransaction(); return; }

//             // 2) ‡∏´‡∏≤ task ‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏£‡∏Å‡πÉ‡∏ô bank ‡∏ô‡∏µ‡πâ
//             const nextTask = await taskRepo.createQueryBuilder('t')
//                 .where('t.store_type = :st', { st: 'T1M' })
//                 .andWhere('t.status = :q', { q: StatusTasks.QUEUED })
//                 .andWhere('t.target_bank_code = :bank', { bank })
//                 .orderBy('t.priority', 'DESC')
//                 .addOrderBy('t.requested_at', 'ASC')
//                 .addOrderBy('t.task_id', 'ASC')
//                 .getOne();

//             if (!nextTask) { if (!manager && queryRunner) await queryRunner.commitTransaction(); return; }

//             const aisleId = Number(nextTask.target_aisle_id);

//             // 3) reserve device
//             device.current_task_id  = nextTask.task_id as any;
//             device.current_aisle_id = String(aisleId) as any;
//             device.is_available     = false;

//             // ‚≠ê mark session open
//             (device as any).is_aisle_open = true;
//             (device as any).open_session_aisle_id = String(aisleId);
//             (device as any).open_session_order_id = nextTask.order_id ?? null;
//             this.extendSession(device);
//             await mrsRepo.save(device);

//             // 4) task_mrs OPEN (PENDING)
//             const openDetail = tmRepo.create({
//                 task_id: String(nextTask.task_id),
//                 mrs_id: String(device.mrs_id),
//                 target_aisle_id: String(aisleId),
//                 action: TaskMrsAction.OPEN,
//                 operator: ControlSource.AUTO,
//                 result: LogResult.PENDING,
//                 started_at: new Date(),
//             });
//             await tmRepo.save(openDetail);

//             // 5) mrs_log start (IN_PROGRESS)
//             await logRepo.save(logRepo.create({
//                 mrs_id: String(device.mrs_id),
//                 aisle_id: String(aisleId),
//                 task_id: String(nextTask.task_id),
//                 task_mrs_id: openDetail.id,
//                 action: MrsLogAction.OPEN_AISLE,
//                 operator: ControlSource.AUTO,
//                 start_time: new Date(),
//                 result: LogResult.IN_PROGRESS,
//             }));

//             // 6) mark EXECUTING
//             await taskRepo.update({ task_id: nextTask.task_id }, { status: StatusTasks.EXECUTING, updated_at: new Date() });

//             // + logTaskEvent: ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏π‡∏Å dispatch ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô bank
//             await this.logTaskEvent(useManager, nextTask as any, 'TASK_EXECUTING', {
//                 prev: StatusTasks.QUEUED, next: StatusTasks.EXECUTING,
//                 mrs_id: String(device.mrs_id), aisle_id: String(aisleId), reason_code: 'AUTO_DISPATCH'
//             });

//             // commit ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏Å‡∏±‡∏ô rollback ‡πÅ‡∏ï‡πà‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
//             if (!manager && queryRunner) await queryRunner.commitTransaction();

//             // 7) send command
//             await this.gw.openAisle({
//                 mrs_id: device.mrs_id,
//                 aisle_id: aisleId,
//                 task_mrs_id: openDetail.id
//             });
//         } catch (error: any) {
//             if (!manager) await queryRunner?.rollbackTransaction();
//             console.error(operation, error);
//             // ‡πÅ‡∏Ñ‡πà log ‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤ retry
//         } finally {
//             if (!manager) await queryRunner?.release();
//         }
//     }

// // ---- Integration Stub: ‡∏ï‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏±‡∏ö WMS/MLM ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ----

//     /** ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏à‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á MRS ‡∏ï‡∏≤‡∏° policy ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (available + no e-stop + ‡πÅ‡∏ö‡∏ï‡∏û‡∏≠) */
//     private async pickMrsForAisle(aisle_id: string, em: EntityManager) {
//         const mrsRepo = em.getRepository(MRS);
//         const aisleRepo = em.getRepository(Aisle);

//         // 1) ‡∏´‡∏≤ bank ‡∏Ç‡∏≠‡∏á aisle ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
//         const aisle = await aisleRepo.findOne({ where: { aisle_id: String(aisle_id) } });
//         if (!aisle) return null;
//         const bank = (aisle as any).bank_code; // ‡πÄ‡∏ä‡πà‡∏ô 'B1'

//         // 2) TTL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏î (dev ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡πâ‡∏á 0 = ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ)
//         const ttlSec = Number(process.env.MRS_TTL_SEC ?? 0); // 0 = ‡∏õ‡∏¥‡∏î TTL ‡πÉ‡∏ô dev

//         // 3) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å MRS ‡∏ó‡∏µ‡πà "‡∏û‡∏£‡πâ‡∏≠‡∏°" ‡πÉ‡∏ô bank ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô + ‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏î‡πâ‡∏ß‡∏¢ lock
//         const qb = mrsRepo.createQueryBuilder('m')
//             .setLock('pessimistic_write') // SELECT ... FOR UPDATE
//             // .skipLocked()              // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ MySQL 8+ ‡πÉ‡∏™‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ (TypeORM ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å
//             .where('m.is_available = 1')
//             .andWhere('m.e_stop = 0')
//             .andWhere('m.current_task_id IS NULL')
//             .andWhere('m.bank_code = :bank', { bank });

//         // (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏û‡∏£‡πâ‡∏≠‡∏°" ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
//         qb.andWhere('m.mrs_status IN (:...ok)', { ok: ['IDLE', 'READY'] });

//         // 4) ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏°‡∏µ last_heartbeat_at ‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏ä‡πâ; ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÉ‡∏ä‡πâ last_update ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
//         if (ttlSec > 0) {
//             qb.andWhere(`
//             (
//                 (m.last_heartbeat_at IS NOT NULL AND m.last_heartbeat_at > DATE_SUB(NOW(), INTERVAL :ttl SECOND))
//                 OR
//                 (m.last_heartbeat_at IS NULL AND m.last_update > DATE_SUB(NOW(), INTERVAL :ttl SECOND))
//             )
//             `, { ttl: ttlSec });
//         }

//         // 5) ‡∏Ñ‡∏±‡∏î‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà "‡∏™‡∏î" ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
//         qb.orderBy('COALESCE(m.last_heartbeat_at, m.last_update)', 'DESC')
//             .limit(1);

//         return qb.getOne();
//     }

//     /** ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ sensor ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ clear ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (TODO: ‡∏ï‡πà‡∏≠ gateway ‡∏à‡∏£‡∏¥‡∏á) */
//     private async isAisleSensorClear(aisle_id: string): Promise<boolean> {
//         if (typeof (this.gw as any).isAisleSensorClear === 'function') {
//         try { return await (this.gw as any).isAisleSensorClear(Number(aisle_id)); } catch { /* fallthrough */ }
//         }
//         // mock default: ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ clear (‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
//         return true;
//     }

//     //‡∏à‡∏∏‡∏î ‚Äú‡πÅ‡∏õ‡∏•‡∏á SKU ‚Üí ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‚Äù (‡∏Ñ‡∏∑‡∏ô aisle_id ‡πÅ‡∏•‡∏∞ bank_code)
//     private hashSku(s: string): number {
//         let h = 5381;
//         for (let i = 0; i < s.length; i++) h = ((h << 5) + h) + s.charCodeAt(i);
//         return Math.abs(h | 0);
//     }

//     private async resolveSkuToAisleT1M(
//         sku: string,
//         manager?: EntityManager
//         ): Promise<{ aisle_id: string; bank_code: string }> {
//         const useManager = manager ?? AppDataSource.manager;
//         const aisleRepo = useManager.getRepository(Aisle);

//         // 1) ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ aisle ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà BLOCKED) ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° aisle_id ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
//         const aisles = await aisleRepo.createQueryBuilder('a')
//             .where('a.status != :blocked', { blocked: AisleStatus.BLOCKED })
//             .orderBy('a.aisle_id', 'ASC')
//             .getMany();

//         if (!aisles.length) throw new Error(lang.msg('validation.location_not_found_for_sku'));

//         // 2) ‡πÉ‡∏ä‡πâ hash(SKU) % aisles.length ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å aisle ‡πÅ‡∏ö‡∏ö deterministic
//         const idx = this.hashSku(sku) % aisles.length;
//         const chosen = aisles[idx];

//         return { aisle_id: String(chosen.aisle_id), bank_code: chosen.bank_code ?? 'B1' };
//     }


// // ==== Helpers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Aisle Session ====
//     private sessionIdleMs = 60_000; // ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ session 60s ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ activity

//     private extendSession(device: MRS) {
//         (device as any).open_session_expires_at = new Date(Date.now() + this.sessionIdleMs);
//     }

//     private async findActiveOpenSession(
//         aisleId: string | number,
//         manager: EntityManager
//         ) {
//         const mrsRepo = manager.getRepository(MRS);
//         return mrsRepo.findOne({
//             where: {
//             current_aisle_id: String(aisleId) as any,
//             is_aisle_open: true as any,
//             e_stop: false as any
//             }
//         });
//     }

//     // ‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô "aisle ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô"
//     private async getNextTaskSameAisle(
//         aisle_id: string, 
//         manager: EntityManager
//     ): Promise<Task | null> {
//         return manager.getRepository(Task).createQueryBuilder('t')
//         .where('t.store_type = :st', { st: 'T1M' })
//         .andWhere('t.status = :q', { q: StatusTasks.QUEUED })
//         .andWhere('t.target_aisle_id = :aisle', { aisle: String(aisle_id) })
//         .orderBy('t.priority', 'DESC')
//         .addOrderBy('t.requested_at', 'ASC')
//         .addOrderBy('t.task_id', 'ASC')
//         .getOne();
//     }

//     // ‚úÖ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô "bank ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô" (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô dispatch / preempt)
//     private async getTopQueuedInBank(
//         bank: string,
//         manager: EntityManager
//     ): Promise<Task | null> {
//         return manager.getRepository(Task).createQueryBuilder('t')
//         .where('t.store_type = :st', { st: 'T1M' })
//         .andWhere('t.status = :q',   { q: StatusTasks.QUEUED })
//         .andWhere('t.target_bank_code = :bank', { bank })
//         .orderBy('t.priority', 'DESC')
//         .addOrderBy('t.requested_at', 'ASC')
//         .addOrderBy('t.task_id', 'ASC')     // tie-breaker
//         .getOne();
//     }


// }


// services/t1m-task.service.ts (refactored non-breaking)
import { EntityManager, Repository } from "typeorm";
import { AppDataSource } from "../config/app-data-source";
import { ApiResponse } from "../models/api-response.model";
import { Task } from "../entities/tasks.entity";
import { TaskMrs } from "../entities/task_mrs.entity";
import { MRS } from "../entities/mrs.entity";
import { Aisle } from "../entities/aisle.entity";
import { MrsLog } from "../entities/mrs_log.entity";
import {
    StatusTasks,
    LogResult,
    MrsLogAction,
    AisleStatus,
    ControlSource,
    TaskMrsAction,
    TaskSource,
    TaskSubsystem,
    TaskEvent,
    TaskReason,
} from "../common/global.enum";
import * as validate from "../utils/ValidationUtils";
import * as lang from "../utils/LangHelper";
import { MrsGateway } from "../gateways/mrs.gateway";
import { CreateT1MTaskDto } from "../dtos/tasks.dto";
import { TaskHistory } from "../entities/task_history.entity";

/**
 * NOTE ‚Äî Goals of this refactor
 * - Keep public API and overall flow identical
 * - Remove duplication (repos, tx boilerplate, tiny cast helpers)
 * - Tighten idempotency & event logging (unchanged behavior)
 * - Keep structure and naming stable for minimal surface change
 */
export class T1MTaskService {
    // NOTE: ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô transaction ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ useManager.getRepository(...) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    private readonly STORE = "T1M" as const;
    private readonly sessionIdleMs = 60_000; // ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ session 60s ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ activity

    // ‡∏£‡∏±‡∏ö gateway ‡∏ú‡πà‡∏≤‡∏ô constructor
    constructor(private gw: MrsGateway) {}

    // ====== Tiny helpers (no behavior changes) ======
    private s = (v: unknown) => (v == null ? null : String(v));

    private buildTodayPrefix(at = new Date()): string {
        const y = at.getFullYear();
        const m = String(at.getMonth() + 1).padStart(2, "0");
        const d = String(at.getDate()).padStart(2, "0");
        return `TID-${y}${m}${d}-`; // e.g. TID-20250828-
    }

    private async issueNextTaskCode(manager: EntityManager): Promise<string> {
        const prefix = this.buildTodayPrefix();
        const rows = await manager.query(
        `SELECT task_code
            FROM tasks
            WHERE task_code LIKE ?
            ORDER BY task_code DESC
            LIMIT 1
            FOR UPDATE`,
        [`${prefix}%`]
        );

        let next = 1;
        if (rows.length) {
        const last: string = String(rows[0].task_code);
        const tail = last.slice(prefix.length);
        const n = parseInt(tail, 10);
        next = (isNaN(n) ? 0 : n) + 1;
        }
        return `${prefix}${String(next).padStart(3, "0")}`;
    }

    /** Centralized repo getter per EntityManager */
    private repos(em: EntityManager) {
        return {
        taskRepo: em.getRepository(Task),
        tmRepo: em.getRepository(TaskMrs),
        mrsRepo: em.getRepository(MRS),
        aisleRepo: em.getRepository(Aisle),
        logRepo: em.getRepository(MrsLog),
        taskHistoryRepo: em.getRepository(TaskHistory),
        } as const;
    }

    /**
     * Begin a (possibly nested) tx consistently.
     * Returns helpers so callers only call commit/rollback/release when needed.
     */
    private async beginTx(manager?: EntityManager) {
        const queryRunner = manager ? null : AppDataSource.createQueryRunner();
        const useManager = manager || queryRunner?.manager;
        if (!useManager)
        throw new Error(lang.msg("validation.no_entityManager_or_queryRunner_available"));

        if (!manager && queryRunner) {
        await queryRunner.connect();
        await queryRunner.startTransaction();
        }

        const r = this.repos(useManager);
        return {
        useManager,
        queryRunner,
        ...r,
        commit: async () => {
            if (!manager && queryRunner) await queryRunner.commitTransaction();
        },
        rollback: async () => {
            if (!manager && queryRunner) await queryRunner.rollbackTransaction();
        },
        release: async () => {
            if (!manager) await queryRunner?.release();
        },
        } as const;
    }

    /**
     * ‡πÄ‡∏Å‡πá‡∏ö ‚Äú‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‚Äù ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏≠‡∏õ: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô, ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
     */
    private async logTaskEvent(
        manager: EntityManager,
        task: Task,
        event: string,
        params?: {
            actor?: string | null;
            source?: TaskSource | string | null;
            subsystem?: TaskSubsystem | string |null;
            mrs_id?: string | number | null;
            aisle_id?: string | number | null;
            reason_code?: string | null;
            meta?: any;
            prev?: StatusTasks | string | null;
            next?: StatusTasks | string | null;
        }
    ): Promise<void> {
        const repo = manager.getRepository(TaskHistory);

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ source/subsystem
        const resolvedSource: TaskSource =
            (params?.source as TaskSource) ?? TaskSource.SYSTEM;
        const resolvedSubsystem: TaskSubsystem =
            (params?.subsystem as TaskSubsystem) ?? TaskSubsystem.CORE;

        // ‡∏ñ‡πâ‡∏≤ caller ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á actor ‡∏°‡∏≤:
        // - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô API ‚Üí ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á username ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
        // - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô DISPATCHER / GATEWAY / SYSTEM ‚Üí ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ source ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô actor ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        const resolvedActor: string | null =
            params?.actor ?? (resolvedSource === TaskSource.API ? null : (resolvedSource as string));

        await repo.insert({
            task_id: String(task.task_id),
            store_type: task.store_type as any, // 'T1' | 'T1M'
            event,
            prev_status: (params?.prev as any) ?? null,
            new_status: (params?.next as any) ?? null,
            actor: resolvedActor,
            source: resolvedSource as any,
            subsystem: resolvedSubsystem as any,
            mrs_id: params?.mrs_id != null ? String(params.mrs_id) : null,
            aisle_id: params?.aisle_id != null ? String(params.aisle_id) : null,
            reason_code: (params?.reason_code as any) ?? null,
            meta_json: params?.meta ?? null,
        });
    }

    /**
     * ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á bank ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
     */
    private async lockBankAndGetRows(bank: string, em: EntityManager) {
        const mrsRepo = em.getRepository(MRS);
        return mrsRepo
        .createQueryBuilder("m")
        .setLock("pessimistic_write")
        .where("m.bank_code = :bank", { bank })
        .getMany();
    }

    // ==== Helpers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Aisle Session ====
    private extendSession(device: MRS) {
        (device as any).open_session_expires_at = new Date(Date.now() + this.sessionIdleMs);
    }

    private async findActiveOpenSession(aisleId: string | number, manager: EntityManager) {
        const mrsRepo = manager.getRepository(MRS);
        return mrsRepo.findOne({
        where: {
            current_aisle_id: this.s(aisleId) as any,
            is_aisle_open: true as any,
            e_stop: false as any,
        },
        });
    }

    // ‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô "aisle ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô"
    private async getNextTaskSameAisle(aisle_id: string, manager: EntityManager): Promise<Task | null> {
        return manager
        .getRepository(Task)
        .createQueryBuilder("t")
        .where("t.store_type = :st", { st: this.STORE })
        .andWhere("t.status = :q", { q: StatusTasks.QUEUED })
        .andWhere("t.target_aisle_id = :aisle", { aisle: this.s(aisle_id)! })
        .orderBy("t.priority", "DESC")
        .addOrderBy("t.requested_at", "ASC")
        .addOrderBy("t.task_id", "ASC")
        .getOne();
    }

    // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô bank ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    private async getTopQueuedInBank(bank: string, manager: EntityManager): Promise<Task | null> {
        return manager
        .getRepository(Task)
        .createQueryBuilder("t")
        .where("t.store_type = :st", { st: this.STORE })
        .andWhere("t.status = :q", { q: StatusTasks.QUEUED })
        .andWhere("t.target_bank_code = :bank", { bank })
        .orderBy("t.priority", "DESC")
        .addOrderBy("t.requested_at", "ASC")
        .addOrderBy("t.task_id", "ASC")
        .getOne();
    }

    /** ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ sensor ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ clear ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà */
    private async isAisleSensorClear(aisle_id: string): Promise<boolean> {
        if (typeof (this.gw as any).isAisleSensorClear === "function") {
            try {
                return await (this.gw as any).isAisleSensorClear(Number(aisle_id));
            } catch {
                /* fallthrough */
            }
        }
        return true; // mock default
    }

    //‡∏à‡∏∏‡∏î ‚Äú‡πÅ‡∏õ‡∏•‡∏á SKU ‚Üí ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‚Äù (‡∏Ñ‡∏∑‡∏ô aisle_id ‡πÅ‡∏•‡∏∞ bank_code)
    private hashSku(s: string): number {
        let h = 5381;
        for (let i = 0; i < s.length; i++) h = (h << 5) + h + s.charCodeAt(i);
        return Math.abs(h | 0);
    }

    private async resolveSkuToAisleT1M(
        sku: string,
        manager?: EntityManager
    ): Promise<{ aisle_id: string; bank_code: string }> {
        const useManager = manager ?? AppDataSource.manager;
        const aisleRepo = useManager.getRepository(Aisle);

        const aisles = await aisleRepo
        .createQueryBuilder("a")
        .where("a.status != :blocked", { blocked: AisleStatus.BLOCKED })
        .orderBy("a.aisle_id", "ASC")
        .getMany();

        if (!aisles.length) throw new Error(lang.msg("validation.location_not_found_for_sku"));

        const idx = this.hashSku(sku) % aisles.length;
        const chosen = aisles[idx]!;
        return { aisle_id: this.s(chosen.aisle_id)!, bank_code: chosen.bank_code ?? "B1" };
    }

    /** ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏à‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á MRS ‡∏ï‡∏≤‡∏° policy ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (available + no e-stop + ‡πÅ‡∏ö‡∏ï‡∏û‡∏≠) */
    private async pickMrsForAisle(aisle_id: string, em: EntityManager) {
        const mrsRepo = em.getRepository(MRS);
        const aisleRepo = em.getRepository(Aisle);

        const aisle = await aisleRepo.findOne({ where: { aisle_id: this.s(aisle_id)! } });
        if (!aisle) return null;
        const bank = (aisle as any).bank_code;

        const ttlSec = Number(process.env.MRS_TTL_SEC ?? 0); // 0 = ‡∏õ‡∏¥‡∏î TTL ‡πÉ‡∏ô dev

        const qb = mrsRepo
        .createQueryBuilder("m")
        .setLock("pessimistic_write")
        .where("m.is_available = 1")
        .andWhere("m.e_stop = 0")
        .andWhere("m.current_task_id IS NULL")
        .andWhere("m.bank_code = :bank", { bank })
        .andWhere("m.mrs_status IN (:...ok)", { ok: ["IDLE", "READY"] });

        if (ttlSec > 0) {
        qb.andWhere(
            `(
            (m.last_heartbeat_at IS NOT NULL AND m.last_heartbeat_at > DATE_SUB(NOW(), INTERVAL :ttl SECOND))
            OR
            (m.last_heartbeat_at IS NULL AND m.last_update > DATE_SUB(NOW(), INTERVAL :ttl SECOND))
            )`,
            { ttl: ttlSec }
        );
        }

        qb.orderBy("COALESCE(m.last_heartbeat_at, m.last_update)", "DESC").limit(1);
        return qb.getOne();
    }

    // ====== PUBLIC FLOWS (kept signatures/behavior) ======

    /**
     * Flow: ‡∏£‡∏±‡∏ö SKU(T1M) -> resolve aisle -> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏à‡∏≠‡∏á MRS -> task_mrs OPEN(PENDING)+mrs_log(IN_PROGRESS) -> ‡∏¢‡∏¥‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á -> tasks.EXECUTING
     * ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏£‡∏≠ event gateway -> onOpenFinished(...)
     */
    async createAndOpen(
        data: CreateT1MTaskDto,
        reqUsername: string,
        manager?: EntityManager
    ): Promise<ApiResponse<any>> {
        const operation = "T1MTaskService.createAndOpen";
        let response = new ApiResponse<any>();

        const ctx = await this.beginTx(manager);
        try {
            const { useManager, taskRepo, mrsRepo, tmRepo, logRepo } = ctx;

            // ----- Validate -----
            if (validate.isNullOrEmpty(data.sku))
                return response.setIncomplete(lang.msgRequired("field.sku"));

            // 1) resolve SKU -> aisle_id (T1M)
            const resolved = await this.resolveSkuToAisleT1M(data.sku);
            if (!resolved?.aisle_id)
                return response.setIncomplete(lang.msg("validation.location_not_found_for_sku"));

            const bankCode = resolved.bank_code ?? "B1";
            const code = await this.issueNextTaskCode(useManager);

            // 2) create task
            const task = Object.assign(new Task(), {
                task_code: code,
                sku: data.sku,
                qty: data.qty,
                priority: data.priority ?? 5,
                store_type: this.STORE,
                status: StatusTasks.NEW,
                requested_by: reqUsername,
                target_aisle_id: this.s(resolved.aisle_id),
                target_bank_code: bankCode,
            });
            await taskRepo.save(task);

            await this.logTaskEvent(useManager, task, TaskEvent.TASK_CREATED, {
                actor: reqUsername,
                source: TaskSource.API,
                subsystem: TaskSubsystem.MRS,
                next: StatusTasks.NEW,
                aisle_id: this.s(resolved.aisle_id),
            });

            // 2.1) ‡∏ï‡∏±‡πâ‡∏á order_id
            const orderIdStr = data.order_id ?? this.s(task.task_id)!;
            await taskRepo.update(
                { task_id: task.task_id },
                { order_id: orderIdStr, status: StatusTasks.ROUTING, updated_at: new Date() }
            );
            await this.logTaskEvent(useManager, task, TaskEvent.TASK_ROUTING, {
                actor: reqUsername,
                source: TaskSource.API,
                subsystem: TaskSubsystem.MRS,
                prev: StatusTasks.NEW,
                next: StatusTasks.ROUTING,
                aisle_id: this.s(resolved.aisle_id),
            });

            // 2.2) ‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á bank ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            const bankRows = await this.lockBankAndGetRows(bankCode, useManager);
            const bankOpen = bankRows.find((r: any) => r.is_aisle_open && !r.e_stop) as MRS | undefined;

            if (bankOpen) {
                if (this.s(bankOpen.current_aisle_id) === this.s(resolved.aisle_id)) {
                // ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏µ‡πÉ‡∏ô aisle ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ flow JOIN_OPEN_SESSION ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
                } else {
                await taskRepo.update({ task_id: task.task_id }, {
                    status: StatusTasks.QUEUED,
                    updated_at: new Date(),
                });
                await this.logTaskEvent(useManager, task, TaskEvent.QUEUED, {
                    actor: reqUsername,
                    source: TaskSource.API,
                    subsystem: TaskSubsystem.MRS,
                    prev: StatusTasks.ROUTING,
                    next: StatusTasks.QUEUED,
                    reason_code: TaskReason.BANK_BUSY,      //‡∏Å‡∏£‡∏ì‡∏µ bank ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏ï‡πà ‡∏Ñ‡∏ô‡∏•‡∏∞ aisle ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
                    aisle_id: this.s(resolved.aisle_id),
                    mrs_id: this.s((bankOpen as any).mrs_id),
                });
                await ctx.commit();
                return response.setComplete(lang.msg("queued.item.t1m_task"), {
                    queued: true,
                    order_id: orderIdStr,
                    task_id: task.task_id,
                    bank_code: bankCode,
                });
                }
            }

            // 2.3) ‡∏°‡∏µ session ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô aisle ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÅ‡∏ô‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ session (JOIN)
            const active = await this.findActiveOpenSession(resolved.aisle_id, useManager);
            if (active) {
                await taskRepo.update({ task_id: task.task_id }, {
                status: StatusTasks.QUEUED,
                updated_at: new Date(),
                });
                await this.logTaskEvent(useManager, task, TaskEvent.QUEUED, {
                    source: TaskSource.API,
                    subsystem: TaskSubsystem.MRS,
                    prev: StatusTasks.ROUTING,
                    next: StatusTasks.QUEUED,
                    reason_code: TaskReason.JOIN_OPEN_SESSION,
                    aisle_id: this.s(resolved.aisle_id),
                    mrs_id: this.s(active.mrs_id),
                });

                await logRepo.save(
                logRepo.create({
                    mrs_id: this.s(active.mrs_id)!,
                    aisle_id: this.s(resolved.aisle_id)!,
                    task_id: this.s(task.task_id)!,
                    action: MrsLogAction.JOIN_OPEN_SESSION as any,
                    operator: ControlSource.AUTO,
                    start_time: new Date(),
                    result: LogResult.IN_PROGRESS,
                })
                );

                this.extendSession(active);
                await mrsRepo.save(active);

                await ctx.commit();
                return response.setComplete(lang.msgSuccessAction("created", "item.t1m_task"), {
                order_id: orderIdStr,
                task_id: task.task_id,
                aisle_id: this.s(resolved.aisle_id),
                mrs_id: active.mrs_id,
                joined_open_session: true,
                });
            }

            // 3) ‡πÑ‡∏°‡πà‡∏°‡∏µ session ‚Üí reserve MRS ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á OPEN
            const device = await this.pickMrsForAisle(resolved.aisle_id, useManager);
            if (!device) {
                await taskRepo.update({ task_id: task.task_id }, { status: StatusTasks.QUEUED, updated_at: new Date() });
                await this.logTaskEvent(useManager, task, TaskEvent.QUEUED, {
                    actor: reqUsername,
                    source: TaskSource.API,
                    subsystem: TaskSubsystem.MRS,
                    prev: StatusTasks.ROUTING,
                    next: StatusTasks.QUEUED,
                    reason_code: TaskReason.NO_DEVICE,
                    aisle_id: this.s(resolved.aisle_id),
                });
                await ctx.commit();
                return response.setComplete(lang.msg("queued.item.t1m_task"), {
                queued: true,
                order_id: orderIdStr,
                task_id: task.task_id,
                bank_code: bankCode,
                });
            }

            device.current_task_id = task.task_id as any;
            device.current_aisle_id = this.s(resolved.aisle_id) as any;
            device.is_available = false;
            (device as any).is_aisle_open = true;
            (device as any).open_session_aisle_id = this.s(resolved.aisle_id);
            (device as any).open_session_order_id = orderIdStr;
            this.extendSession(device);
            await mrsRepo.save(device);

            // 4) task_mrs OPEN (PENDING)
            const openDetail = tmRepo.create({
                task_id: this.s(task.task_id)!,
                mrs_id: this.s(device.mrs_id)!,
                target_aisle_id: this.s(resolved.aisle_id)!,
                action: TaskMrsAction.OPEN,
                operator: ControlSource.AUTO,
                result: LogResult.PENDING,
                started_at: new Date(),
            });
            await tmRepo.save(openDetail);

            // 5) mrs_log start (IN_PROGRESS)
            await logRepo.save(
                logRepo.create({
                mrs_id: this.s(device.mrs_id)!,
                aisle_id: this.s(resolved.aisle_id)!,
                task_id: this.s(task.task_id)!,
                task_mrs_id: openDetail.id,
                action: MrsLogAction.OPEN_AISLE,
                operator: ControlSource.AUTO,
                start_time: new Date(),
                result: LogResult.IN_PROGRESS,
                })
            );

            // 6) send command (NOTE: same order as original ‚Äî inside tx)
            await this.gw.openAisle({
                mrs_id: device.mrs_id,
                aisle_id: Number(resolved.aisle_id),
                task_mrs_id: openDetail.id,
            });

            // 7) tasks.EXECUTING
            await taskRepo.update(
                { task_id: task.task_id },
                { status: StatusTasks.EXECUTING, updated_at: new Date() }
            );
            await this.logTaskEvent(useManager, task, TaskEvent.TASK_EXECUTING, {
                actor: reqUsername,
                source: TaskSource.API,
                subsystem: TaskSubsystem.MRS,
                prev: StatusTasks.ROUTING,
                next: StatusTasks.EXECUTING,
                mrs_id: this.s(device.mrs_id),
                aisle_id: this.s(resolved.aisle_id),
            });

            await ctx.commit();
            return response.setComplete(lang.msgSuccessAction("created", "item.t1m_task"), {
                order_id: orderIdStr,
                task_id: task.task_id,
                aisle_id: this.s(resolved.aisle_id),
                mrs_id: device.mrs_id,
                task_mrs_open_id: openDetail.id,
            });
        } catch (error: any) {
            await ctx.rollback();
            console.error(operation, error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        } finally {
            await ctx.release();
        }
    }

    /** ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ gateway ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (idempotent) -> WAIT_CONFIRM */
    async onOpenFinished(
        payload: { task_mrs_id: string; duration_ms?: number },
        manager?: EntityManager
    ): Promise<ApiResponse<any>> {
        const operation = "T1MTaskService.onOpenFinished";
        let response = new ApiResponse<any>();

        const ctx = await this.beginTx(manager);
        try {
            const { useManager, tmRepo, logRepo, aisleRepo, taskRepo, mrsRepo } = ctx;

            const detail = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
            if (!detail) return response.setIncomplete(lang.msg("validation.not_found"));
            if (detail.action !== TaskMrsAction.OPEN)
                return response.setIncomplete(lang.msg("validation.invalid_action_for_handler"));

            // idempotent guard
            if (detail.result === LogResult.SUCCESS) {
                await ctx.commit();
                return response.setComplete(lang.msgSuccessAction("updated", "item.task_mrs"), {
                task_mrs_id: detail.id,
                });
            }

            const now = new Date();

            // ‡∏õ‡∏¥‡∏î task_mrs (OPEN) ‡πÄ‡∏õ‡πá‡∏ô SUCCESS
            detail.finished_at = now;
            detail.result = LogResult.SUCCESS;
            detail.open_duration_ms = payload.duration_ms;
            await tmRepo.save(detail);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡πà‡∏≠‡∏á
            await aisleRepo.update(
                { aisle_id: detail.target_aisle_id },
                { status: AisleStatus.OPEN as any, last_opened_at: now, last_event_at: now }
            );

            // ‡∏õ‡∏¥‡∏î log ‡∏î‡πâ‡∏ß‡∏¢ task_mrs_id ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            await logRepo.update(
                { task_mrs_id: this.s(detail.id)! },
                { end_time: now, task_duration: payload.duration_ms ?? null, result: LogResult.SUCCESS }
            );

            // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô session ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô MRS + ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏
            const device = await mrsRepo.findOne({ where: { mrs_id: detail.mrs_id as any } });
            if (device) {
                (device as any).is_aisle_open = true;
                (device as any).open_session_aisle_id = this.s(detail.target_aisle_id);
                this.extendSession(device);
                await mrsRepo.save(device);
            }

            // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            await taskRepo.update(
                { task_id: detail.task_id },
                { status: StatusTasks.WAIT_CONFIRM, updated_at: now }
            );

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Task History ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ enum
            const t = await taskRepo.findOne({ where: { task_id: detail.task_id } });
            if (t) {
                await this.logTaskEvent(useManager, t, TaskEvent.TASK_WAIT_CONFIRM, {
                    source: TaskSource.GATEWAY,         // ‚Üê ‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
                    subsystem: TaskSubsystem.MRS,       // ‚Üê ‡∏ù‡∏±‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢
                    prev: StatusTasks.EXECUTING,
                    next: StatusTasks.WAIT_CONFIRM,
                    mrs_id: this.s(detail.mrs_id),
                    aisle_id: this.s(detail.target_aisle_id),
                });
            }

            await ctx.commit();
            return response.setComplete(lang.msgSuccessAction("updated", "item.task_mrs"), {
                task_mrs_id: detail.id,
            });
        } catch (error: any) {
            await ctx.rollback();
            console.error(operation, error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        } finally {
            await ctx.release();
        }
    }

    /**
     * ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô -> ‡∏ï‡∏£‡∏ß‡∏à sensor; ‡∏ñ‡πâ‡∏≤ clear: ‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà clear: discard (log ‡πÑ‡∏ß‡πâ) ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á WAIT_CONFIRM
     */
    async closeAfterConfirm(
        task_id: string,
        reqUsername: string,
        manager?: EntityManager
    ): Promise<ApiResponse<any>> {
        const operation = "T1MTaskService.closeAfterConfirm";
        let response = new ApiResponse<any>();

        const ctx = await this.beginTx(manager);
        try {
            const { useManager, taskRepo, tmRepo, logRepo, mrsRepo } = ctx;

            const task = await taskRepo.findOne({ where: { task_id } });
            if (!task) return response.setIncomplete(lang.msg("validation.not_found"));

            const lastOpen = await tmRepo.findOne({
                where: { task_id: this.s(task_id)!, action: TaskMrsAction.OPEN as any },
                order: { started_at: "DESC" },
            });
            if (!lastOpen) return response.setIncomplete(lang.msg("validation.not_found"));

            // user ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            await this.logTaskEvent(useManager, task, TaskEvent.USER_CONFIRM, {
                actor: reqUsername,
                source: TaskSource.API,
                subsystem: TaskSubsystem.MRS,
                mrs_id: this.s(lastOpen.mrs_id),
                aisle_id: this.s(lastOpen.target_aisle_id),
                prev: StatusTasks.WAIT_CONFIRM,
                next: StatusTasks.WAIT_CONFIRM,
            });

             // ‡∏ï‡∏£‡∏ß‡∏à sensor
            const sensorClear = await this.isAisleSensorClear(lastOpen.target_aisle_id);
            if (!sensorClear) {
                await this.logTaskEvent(useManager, task, TaskEvent.USER_CONFIRM_BLOCKED, {
                    actor: reqUsername,
                    prev: StatusTasks.WAIT_CONFIRM,
                    next: StatusTasks.WAIT_CONFIRM,
                    source: TaskSource.API,
                    subsystem: TaskSubsystem.MRS,
                    reason_code: TaskReason.SENSOR_BLOCKED,
                    aisle_id: this.s(lastOpen.target_aisle_id),
                    mrs_id: this.s(lastOpen.mrs_id),
                });
                await logRepo.save(logRepo.create({
                        mrs_id: lastOpen.mrs_id,
                        aisle_id: lastOpen.target_aisle_id,
                        task_id: this.s(task_id)!,
                        action: MrsLogAction.CLOSE_AISLE,
                        operator: ControlSource.AUTO,
                        start_time: new Date(),
                        end_time: new Date(),
                        result: LogResult.DISCARDED,
                        error_msg: "Sensor detects object; discard close",
                    } as any)
                );
                await taskRepo.update({ task_id }, { status: StatusTasks.WAIT_CONFIRM, updated_at: new Date() });
                await ctx.commit();
                return response.setIncomplete(lang.msg("validation.sensor_detect_object_discard_close"));
            }

            const now = new Date();
            const device = await mrsRepo.findOne({ where: { mrs_id: lastOpen.mrs_id as any } });
            const bankCode = device?.bank_code ?? "B1";

            const [topSameAisle, topInBank] = await Promise.all([
                this.getNextTaskSameAisle(lastOpen.target_aisle_id, useManager),
                this.getTopQueuedInBank(bankCode, useManager),
            ]);

            const shouldPreempt =
                !!topInBank &&
                (!topSameAisle ||
                (topInBank.priority > topSameAisle.priority &&
                    this.s(topInBank.target_aisle_id) !== this.s(lastOpen.target_aisle_id)));

            // ‡πÑ‡∏°‡πà preempt ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÉ‡∏ô aisle ‡πÄ‡∏î‡∏¥‡∏° ‚Üí ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
            if (!shouldPreempt && topSameAisle && device) {
                await taskRepo.update({ task_id }, { status: StatusTasks.DONE, updated_at: now });
                await this.logTaskEvent(useManager, task, TaskEvent.TASK_DONE, {
                    actor: reqUsername,
                    prev: StatusTasks.WAIT_CONFIRM,
                    next: StatusTasks.DONE,
                    source: TaskSource.API,
                    subsystem: TaskSubsystem.MRS,
                    aisle_id: this.s(lastOpen.target_aisle_id),
                    mrs_id: this.s(device.mrs_id),
                });

                await taskRepo.update(
                    { task_id: topSameAisle.task_id },
                    { status: StatusTasks.WAIT_CONFIRM, updated_at: now }
                );
                const next = await taskRepo.findOne({ where: { task_id: topSameAisle.task_id } });
                if (next) {
                    await this.logTaskEvent(useManager, next, TaskEvent.TASK_WAIT_CONFIRM, {
                        prev: StatusTasks.QUEUED,
                        next: StatusTasks.WAIT_CONFIRM,
                        source: TaskSource.SYSTEM,
                        subsystem: TaskSubsystem.MRS,
                        reason_code: TaskReason.CONTINUE_IN_OPEN_SESSION,
                        aisle_id: this.s(next.target_aisle_id),
                        mrs_id: this.s(device.mrs_id),
                    });
                }

                device.current_task_id = topSameAisle.task_id as any;
                (device as any).is_aisle_open = true;
                this.extendSession(device);
                await mrsRepo.save(device);

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á task_mrs OPEN (synthetic) ‡πÉ‡∏´‡πâ task ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                let tmOpen = await tmRepo.findOne({
                    where: { task_id: this.s(topSameAisle.task_id)!, action: TaskMrsAction.OPEN as any },
                    order: { started_at: "DESC" },
                });
                if (!tmOpen) {
                    tmOpen = tmRepo.create({
                        task_id: this.s(topSameAisle.task_id)!,
                        mrs_id: this.s(device.mrs_id)!,
                        target_aisle_id: this.s(topSameAisle.target_aisle_id)!,
                        action: TaskMrsAction.OPEN,
                        operator: ControlSource.AUTO,
                        result: LogResult.SUCCESS,
                        started_at: now,
                        finished_at: now,
                        open_duration_ms: 0,
                    });
                    await tmRepo.save(tmOpen);

                    await logRepo.save(
                        logRepo.create({
                        mrs_id: this.s(device.mrs_id)!,
                        aisle_id: this.s(topSameAisle.target_aisle_id)!,
                        task_id: this.s(topSameAisle.task_id)!,
                        task_mrs_id: tmOpen.id,
                        action: MrsLogAction.CONTINUE_IN_OPEN_SESSION,
                        operator: ControlSource.AUTO,
                        start_time: now,
                        result: LogResult.IN_PROGRESS,
                        })
                    );
                }

                await ctx.commit();
                return response.setComplete(lang.msg("continue_in_open_session"), {
                    continued: true,
                    next_task_id: topSameAisle.task_id,
                    aisle_id: this.s(lastOpen.target_aisle_id),
                });
            }

            // preempt (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô same-aisle) ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á CLOSE ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î
            const closeDetail = tmRepo.create({
                task_id: this.s(task_id)!,
                mrs_id: lastOpen.mrs_id,
                target_aisle_id: lastOpen.target_aisle_id,
                action: TaskMrsAction.CLOSED, // ‚ö† ensure enum contains CLOSED
                operator: ControlSource.AUTO,
                result: LogResult.PENDING,
                started_at: now,
            });
            await tmRepo.save(closeDetail);

            await logRepo.save(
                logRepo.create({
                mrs_id: lastOpen.mrs_id,
                aisle_id: lastOpen.target_aisle_id,
                task_id: this.s(task_id)!,
                action: MrsLogAction.CLOSE_AISLE,
                operator: ControlSource.AUTO,
                start_time: now,
                result: LogResult.IN_PROGRESS,
                })
            );

            await this.gw.closeAisle({
                mrs_id: Number(lastOpen.mrs_id),
                aisle_id: Number(lastOpen.target_aisle_id),
                task_mrs_id: closeDetail.id,
            });

            await taskRepo.update({ task_id }, { status: StatusTasks.CLOSING, updated_at: now });
            await this.logTaskEvent(useManager, task, TaskEvent.TASK_CLOSING, {
                actor: reqUsername,
                prev: StatusTasks.WAIT_CONFIRM,
                next: StatusTasks.CLOSING,
                source: TaskSource.API,
                subsystem: TaskSubsystem.MRS,
                aisle_id: this.s(lastOpen.target_aisle_id),
                mrs_id: this.s(lastOpen.mrs_id),
                reason_code: shouldPreempt ? TaskReason.PREEMPT : TaskReason.NO_NEXT_SAME_AISLE,
            });

            await ctx.commit();
            return response.setComplete(lang.msgSuccessAction("updated", "item.t1m_task"), {
                task_mrs_close_id: closeDetail.id,
                closed: true,
                preempted: shouldPreempt,
            });
        } catch (error: any) {
            await ctx.rollback();
            console.error(operation, error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        } finally {
            await ctx.release();
        }
    }

    /** ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (idempotent) -> DONE + ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á */
    async onCloseFinished(
        payload: { task_mrs_id: string; duration_ms?: number },
        manager?: EntityManager
    ): Promise<ApiResponse<any>> {
        const operation = "T1MTaskService.onCloseFinished";
        let response = new ApiResponse<any>();

        const ctx = await this.beginTx(manager);
        try {
            const { useManager, tmRepo, logRepo, taskRepo, aisleRepo, mrsRepo } = ctx;

            const detail = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
            if (!detail) return response.setIncomplete(lang.msg("validation.not_found"));
            if (detail.action !== TaskMrsAction.CLOSED)
                return response.setIncomplete(lang.msg("validation.invalid_action_for_handler"));

            const now = new Date();

            // Idempotent: ‡πÄ‡∏Ñ‡∏¢ SUCCESS ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ensure task DONE ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å
            if (detail.result === LogResult.SUCCESS) {
                await taskRepo.update({ task_id: detail.task_id }, { status: StatusTasks.DONE, updated_at: now });

                const taskEnt = await taskRepo.findOne({ where: { task_id: detail.task_id } });
                if (taskEnt) {
                    await this.logTaskEvent(useManager, taskEnt, TaskEvent.CLOSE_ALREADY_SUCCESS, {
                        source: TaskSource.GATEWAY,
                        subsystem: TaskSubsystem.MRS,
                        prev: StatusTasks.CLOSING,
                        next: StatusTasks.DONE,
                        aisle_id: this.s(detail.target_aisle_id),
                        mrs_id: this.s(detail.mrs_id),
                        reason_code: TaskReason.CLOSE_FINISHED_DUP,
                        meta: { close_duration_ms: payload.duration_ms }
                    });
                }

                await ctx.commit();

                // dispatch ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô bank ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡∏ô‡∏≠‡∏Å tx ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°)
                const devForDispatch = await mrsRepo.findOne({ where: { mrs_id: detail.mrs_id as any } });
                const aisleRow = await aisleRepo.findOne({ where: { aisle_id: this.s(detail.target_aisle_id)! } });
                const bankForDispatch = devForDispatch?.bank_code ?? aisleRow?.bank_code;
                if (bankForDispatch) await this.dispatchNextForBank(bankForDispatch);

                return response.setComplete(lang.msgSuccessAction("updated", "item.task_mrs"), {
                task_mrs_id: detail.id,
                });
            }

            // ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            detail.finished_at = now;
            detail.result = LogResult.SUCCESS;
            detail.close_duration_ms = payload.duration_ms;
            await tmRepo.save(detail);

            // ‡∏õ‡∏¥‡∏î mrs_log 
            await logRepo.update(
                { task_mrs_id: this.s(detail.id)! },
                { end_time: now, task_duration: payload.duration_ms ?? null, result: LogResult.SUCCESS }
            );

            // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô CLOSED
            await aisleRepo.update(
                { aisle_id: detail.target_aisle_id },
                { status: AisleStatus.CLOSED as any, last_closed_at: now, last_event_at: now }
            );

            // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á + reset session flags
            const device = await mrsRepo.findOne({ where: { current_task_id: detail.task_id } });
            const bankCode = device?.bank_code;
            if (device) {
                device.current_task_id = null as any;
                device.current_aisle_id = null as any;
                device.is_available = true;
                (device as any).is_aisle_open = false;
                (device as any).open_session_aisle_id = null;
                (device as any).open_session_order_id = null;
                (device as any).open_session_expires_at = null;
                await mrsRepo.save(device);
            }

            // ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°
            await taskRepo.update({ task_id: detail.task_id }, { status: StatusTasks.DONE, updated_at: now });

            const taskEnt = await taskRepo.findOne({ where: { task_id: detail.task_id } });
            if (taskEnt) {
                // CLOSE_SUCCESS (‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå close ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
                await this.logTaskEvent(useManager, taskEnt, TaskEvent.CLOSE_SUCCESS, {
                    source: TaskSource.GATEWAY,
                    subsystem: TaskSubsystem.MRS,
                    prev: StatusTasks.CLOSING,
                    next: StatusTasks.DONE,
                    aisle_id: this.s(detail.target_aisle_id),
                    mrs_id: this.s(detail.mrs_id),
                    reason_code: TaskReason.CLOSE_FINISHED,
                    meta: { close_duration_ms: payload.duration_ms }
                });

                 // TASK_DONE (‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
                await this.logTaskEvent(useManager, taskEnt, TaskEvent.TASK_DONE, {
                    source: TaskSource.SYSTEM,
                    subsystem: TaskSubsystem.MRS,
                    prev: StatusTasks.CLOSING,
                    next: StatusTasks.DONE,
                });

                // SESSION_CLOSED (‡∏õ‡∏¥‡∏î session ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏≤)
                if (device) {
                    await this.logTaskEvent(useManager, taskEnt, TaskEvent.SESSION_CLOSED, {
                        source: TaskSource.GATEWAY,
                        subsystem: TaskSubsystem.MRS,
                        aisle_id: this.s(detail.target_aisle_id),
                        mrs_id: this.s(device.mrs_id),
                    });
                }
            }

            await ctx.commit();

            if (bankCode) await this.dispatchNextForBank(bankCode);
            return response.setComplete(lang.msgSuccessAction("updated", "item.task_mrs"), {
                task_mrs_id: detail.id,
            });
        } catch (error: any) {
            await ctx.rollback();
            console.error(operation, error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        } finally {
            await ctx.release();
        }
    }

    // ============== HELPERS ==============

    private async dispatchNextForBank(bank: string, manager?: EntityManager) {
        const operation = "T1MTaskService.dispatchNextForBank";
        const ctx = await this.beginTx(manager);

        try {
        const { useManager, mrsRepo, taskRepo, tmRepo, logRepo } = ctx;

        // 1) ‡∏´‡∏≤ device ‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô bank ‡∏ô‡∏µ‡πâ
        const device = await mrsRepo
            .createQueryBuilder("m")
            .setLock("pessimistic_write")
            .where("m.bank_code = :bank", { bank })
            .andWhere("m.is_available = 1")
            .andWhere("m.e_stop = 0")
            .orderBy("COALESCE(m.last_heartbeat_at, m.last_update)", "DESC")
            .getOne();

        if (!device) {
            await ctx.commit();
            return;
        }

        // 2) ‡∏´‡∏≤ task ‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏£‡∏Å‡πÉ‡∏ô bank ‡∏ô‡∏µ‡πâ
        const nextTask = await taskRepo
            .createQueryBuilder("t")
            .where("t.store_type = :st", { st: this.STORE })
            .andWhere("t.status = :q", { q: StatusTasks.QUEUED })
            .andWhere("t.target_bank_code = :bank", { bank })
            .orderBy("t.priority", "DESC")
            .addOrderBy("t.requested_at", "ASC")
            .addOrderBy("t.task_id", "ASC")
            .getOne();

        if (!nextTask) {
            await ctx.commit();
            return;
        }

        const aisleId = Number(nextTask.target_aisle_id);

        // 3) reserve device
        device.current_task_id = nextTask.task_id as any;
        device.current_aisle_id = this.s(aisleId) as any;
        device.is_available = false;
        (device as any).is_aisle_open = true;
        (device as any).open_session_aisle_id = this.s(aisleId);
        (device as any).open_session_order_id = nextTask.order_id ?? null;
        this.extendSession(device);
        await mrsRepo.save(device);

        // 4) task_mrs OPEN (PENDING)
        const openDetail = tmRepo.create({
            task_id: this.s(nextTask.task_id)!,
            mrs_id: this.s(device.mrs_id)!,
            target_aisle_id: this.s(aisleId)!,
            action: TaskMrsAction.OPEN,
            operator: ControlSource.AUTO,
            result: LogResult.PENDING,
            started_at: new Date(),
        });
        await tmRepo.save(openDetail);

        // 5) mrs_log start (IN_PROGRESS)
        await logRepo.save(
            logRepo.create({
            mrs_id: this.s(device.mrs_id)!,
            aisle_id: this.s(aisleId)!,
            task_id: this.s(nextTask.task_id)!,
            task_mrs_id: openDetail.id,
            action: MrsLogAction.OPEN_AISLE,
            operator: ControlSource.AUTO,
            start_time: new Date(),
            result: LogResult.IN_PROGRESS,
            })
        );

        // 6) mark EXECUTING
        await taskRepo.update(
            { task_id: nextTask.task_id },
            { status: StatusTasks.EXECUTING, updated_at: new Date() }
        );
        await this.logTaskEvent(useManager, nextTask as any, TaskEvent.TASK_EXECUTING, {
            source: TaskSource.DISPATCHER,
            subsystem: TaskSubsystem.MRS,
            prev: StatusTasks.QUEUED,
            next: StatusTasks.EXECUTING,
            mrs_id: this.s(device.mrs_id),
            aisle_id: this.s(aisleId),
        });

        // commit ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏Å‡∏±‡∏ô rollback ‡πÅ‡∏ï‡πà‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß) ‚Äî ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        await ctx.commit();

        await this.gw.openAisle({
            mrs_id: device.mrs_id,
            aisle_id: aisleId,
            task_mrs_id: openDetail.id,
        });
        } catch (error: any) {
        await ctx.rollback();
        console.error(operation, error);
        // ‡πÅ‡∏Ñ‡πà log ‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤ retry
        } finally {
        await ctx.release();
        }
    }
}


// // ============== EVENTS: ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ / ‡πÄ‡∏™‡∏£‡∏¥‡∏° ==============

//     /** MRS ‡πÅ‡∏à‡πâ‡∏á‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á (idempotent) */
//     async onBlocked(payload: { task_mrs_id: string; reason?: string }, manager?: EntityManager) {
//         const em = manager ?? AppDataSource.manager;
//         const tmRepo  = em.getRepository(TaskMrs);
//         const logRepo = em.getRepository(MrsLog);

//         const d = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
//         if (!d) return new ApiResponse().setIncomplete(lang.msg('validation.not_found'));

//         // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ß action ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
//         d.blocked_flag = true as any;
//         d.blocked_reason = payload.reason ?? 'BLOCKED';
//         // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≠‡∏ô‡∏à‡∏∞‡∏õ‡∏¥‡∏î ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ discard (‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ fail)
//         await tmRepo.save(d);

//         // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏∑‡∏ö‡πÄ‡∏´‡∏ï‡∏∏
//         await logRepo.save(logRepo.create({
//         mrs_id: d.mrs_id, aisle_id: d.target_aisle_id, task_id: String(d.task_id),
//         action: d.action === 'CLOSED' ? ('CLOSE_AISLE' as any) : ('OPEN_AISLE' as any),
//         start_time: new Date(), end_time: new Date(),
//         result: LogResult.DISCARDED,
//         error_msg: payload.reason,
//         operator: d.operator as any,
//         }));

//         return new ApiResponse().setComplete(lang.msgSuccessAction('updated', 'item.task_mrs'), { task_mrs_id: d.id });
//     }

    


//     /** Fault ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á/‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏• -> mark FAILED */
//     async onFault(payload: { mrs_id: number; code?: string; msg?: string; task_mrs_id?: string }, manager?: EntityManager) {
//         const em = manager ?? AppDataSource.manager;
//         const mrsRepo = em.getRepository(MRS);
//         const tmRepo  = em.getRepository(TaskMrs);
//         const taskRepo= em.getRepository(Task);
//         const logRepo = em.getRepository(MrsLog);

//         const mrs = await mrsRepo.findOne({ where: { mrs_id: payload.mrs_id } });
//         if (mrs) { mrs.fault_msg = payload.msg ?? payload.code ?? 'FAULT'; await mrsRepo.save(mrs); }

//         if (payload.task_mrs_id) {
//         const d = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
//         if (d && d.result !== LogResult.SUCCESS) {
//             d.result = LogResult.FAIL;
//             d.finished_at = new Date();
//             await tmRepo.save(d);

//             // ‡∏õ‡∏¥‡∏î log
//             await logRepo.createQueryBuilder()
//             .update(MrsLog)
//             .set({ end_time: new Date(), result: LogResult.FAIL, error_code: payload.code, error_msg: payload.msg })
//             .where('task_id = :t AND aisle_id = :a AND action = :act', { t: d.task_id, a: d.target_aisle_id, act: d.action === 'OPEN' ? 'OPEN_AISLE' : 'CLOSE_AISLE' })
//             .execute();

//             await taskRepo.update({ task_id: d.task_id }, { status: StatusTasks.FAILED, updated_at: new Date(), error_code: payload.code as any, error_msg: payload.msg as any });
//         }
//         }

//         return new ApiResponse().setComplete(lang.msgSuccessAction('updated', 'item.mrs'), {});
//     }

//     /** Timeout ‡∏Ç‡∏≠‡∏á action ‡πÉ‡∏î‡πÜ */
//     async onTimeout(payload: { task_mrs_id: string }, manager?: EntityManager) {
//         const em = manager ?? AppDataSource.manager;
//         const tmRepo  = em.getRepository(TaskMrs);
//         const logRepo = em.getRepository(MrsLog);
//         const taskRepo= em.getRepository(Task);

//         const d = await tmRepo.findOne({ where: { id: payload.task_mrs_id } });
//         if (!d) return new ApiResponse().setIncomplete(lang.msg('validation.not_found'));

//         if (d.result === LogResult.SUCCESS) return new ApiResponse().setComplete(lang.msg('common.already_completed'), {});

//         d.retry_count = (d.retry_count ?? 0) + 1;
//         d.result = LogResult.FAIL; // ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á TIMEOUT ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡πá‡πÑ‡∏î‡πâ
//         d.finished_at = new Date();
//         await tmRepo.save(d);

//         await logRepo.createQueryBuilder()
//         .update(MrsLog)
//         .set({ end_time: new Date(), result: LogResult.FAIL, error_msg: 'TIMEOUT' })
//         .where('task_id = :t AND aisle_id = :a AND action = :act', { t: d.task_id, a: d.target_aisle_id, act: d.action === 'OPEN' ? 'OPEN_AISLE' : 'CLOSE_AISLE' })
//         .execute();

//         await taskRepo.update({ task_id: d.task_id }, { status: StatusTasks.FAILED, updated_at: new Date(), error_code: 'TIMEOUT' as any, error_msg: 'Action timeout' as any });

//         return new ApiResponse().setComplete(lang.msg('common.timeout'), {});
//     }

// // ============== MANUAL OVERRIDE ==============

//     /** ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö manual (‡∏™‡∏£‡πâ‡∏≤‡∏á ad-hoc task ‡πÄ‡∏û‡∏∑‡πà‡∏≠ audit) */
//     // async manualOpen(aisle_id: string, reqUser: string, note?: string, manager?: EntityManager) {
//     //     const response = new ApiResponse<any>();
//     //     const operation = 'T1MTaskService.manualOpen';

//     //     const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//     //     const em = manager || queryRunner?.manager;
//     //     if (!em) return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));

//     //     if (!manager && queryRunner) { await queryRunner.connect(); await queryRunner.startTransaction(); }

//     //     try {
//     //     const taskRepo = em.getRepository(Task);
//     //     const mrsRepo  = em.getRepository(MRS);
//     //     const tmRepo   = em.getRepository(TaskMrs);
//     //     const logRepo  = em.getRepository(MrsLog);

//     //     // 1) reserve device
//     //     const device = await this.pickMrsForAisle(aisle_id, em);
//     //     if (!device) return response.setIncomplete(lang.msg('validation.no_available_mrs'));

//     //     // 2) ad-hoc task
//     //     const task = await taskRepo.save(taskRepo.create({
//     //         order_id: `MANUAL-${new Date().toISOString()}`,  //‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç roder_id
//     //         sku: 'MANUAL',
//     //         priority: 5,
//     //         store_type: 'T1M',
//     //         status: StatusTasks.EXECUTING,
//     //         requested_by: reqUser,
//     //     }));

//     //     device.current_task_id  = task.task_id as any;
//     //     device.current_aisle_id = String(aisle_id) as any;
//     //     device.is_available     = false;
//     //     await mrsRepo.save(device);

//     //     // 3) OPEN detail + log
//     //     const openDetail = await tmRepo.save(tmRepo.create({
//     //         task_id: task.task_id,
//     //         mrs_id: String(device.mrs_id),
//     //         target_aisle_id: String(aisle_id),
//     //         action: AisleStatus.OPEN,
//     //         operator: ControlSource.MANUAL,
//     //         result: LogResult.PENDING,
//     //         started_at: new Date(),
//     //         // control_params_json: { operator_note: note } as any, // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
//     //     }));

//     //     await logRepo.save(logRepo.create({
//     //         mrs_id: String(device.mrs_id),
//     //         aisle_id: String(aisle_id),
//     //         task_id: String(task.task_id),
//     //         action: MrsLogAction.OPEN_AISLE,
//     //         operator: ControlSource.MANUAL,
//     //         start_time: new Date(),
//     //         result: LogResult.IN_PROGRESS,
//     //         // error_msg: note,
//     //     }));

//     //     await this.gw.openAisle({ mrs_id: device.mrs_id, aisle_id: Number(aisle_id), task_mrs_id: openDetail.id });

//     //     if (!manager && queryRunner) await queryRunner.commitTransaction();
//     //     return response.setComplete(lang.msgSuccessAction('created', 'item.t1m_task'), { task_id: task.task_id, task_mrs_open_id: openDetail.id, mrs_id: device.mrs_id });
//     //     } catch (e:any) {
//     //     if (!manager) await queryRunner?.rollbackTransaction();
//     //     throw new Error(lang.msgErrorFunction(operation, e.message));
//     //     } finally {
//     //     if (!manager) await queryRunner?.release();
//     //     }
//     // }

//     /** ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö manual (force ‡πÑ‡∏î‡πâ‚Äî‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à sensor ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà force) */
//     async manualClose(aisle_id: string, reqUser: string, opts?: { force?: boolean; note?: string }, manager?: EntityManager) {
//         const response = new ApiResponse<any>();
//         const operation = 'T1MTaskService.manualClose';

//         const queryRunner = manager ? null : AppDataSource.createQueryRunner();
//         const em = manager || queryRunner?.manager;
//         if (!em) return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
//         if (!manager && queryRunner) { await queryRunner.connect(); await queryRunner.startTransaction(); }

//         try {
//         const tmRepo   = em.getRepository(TaskMrs);
//         const taskRepo = em.getRepository(Task);
//         const logRepo  = em.getRepository(MrsLog);

//         // ‡∏´‡∏≤ OPEN ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
//         const open = await tmRepo.findOne({ where: { target_aisle_id: String(aisle_id), action: 'OPEN' as any }, order: { started_at: 'DESC' } });
//         if (!open) return response.setIncomplete(lang.msg('validation.not_found'));

//         if (!(opts?.force)) {
//             const sensorClear = await this.isAisleSensorClear(aisle_id);
//             if (!sensorClear) {
//             await logRepo.save(logRepo.create({
//                 mrs_id: open.mrs_id, 
//                 aisle_id: String(aisle_id), 
//                 task_id: String(open.task_id),
//                 action: MrsLogAction.CLOSE_AISLE, 
//                 operator: ControlSource.MANUAL, 
//                 start_time: new Date(), 
//                 end_time: new Date(),
//                 result: LogResult.DISCARDED, 
//                 error_msg: 'Sensor detects object (manual)',
//             }));
//             await taskRepo.update({ task_id: open.task_id }, { status: StatusTasks.WAIT_CONFIRM, updated_at: new Date() });
//             return response.setIncomplete(lang.msg('validation.sensor_detect_object_discard_close'));
//             }
//         }

//         // insert CLOSE (MANUAL) + log ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
//         const closeDetail = await tmRepo.save(tmRepo.create({
//             task_id: open.task_id, 
//             mrs_id: open.mrs_id, 
//             target_aisle_id: open.target_aisle_id,
//             action: TaskMrsAction.CLOSED, 
//             operator: ControlSource.MANUAL, 
//             result: LogResult.PENDING, 
//             started_at: new Date(),
//         }));

//         await logRepo.save(logRepo.create({
//             mrs_id: closeDetail.mrs_id, 
//             aisle_id: closeDetail.target_aisle_id, 
//             task_id: String(closeDetail.task_id),
//             action: MrsLogAction.CLOSE_AISLE, 
//             operator: ControlSource.MANUAL, 
//             start_time: new Date(), 
//             result: LogResult.IN_PROGRESS,
//         }));

//         await this.gw.closeAisle({ mrs_id: Number(closeDetail.mrs_id), aisle_id: Number(closeDetail.target_aisle_id), task_mrs_id: closeDetail.id });
//         await taskRepo.update({ task_id: closeDetail.task_id }, { status: StatusTasks.CLOSING, updated_at: new Date() });

//         if (!manager && queryRunner) await queryRunner.commitTransaction();
//         return response.setComplete(lang.msgSuccessAction('updated', 'item.t1m_task'), { task_mrs_close_id: closeDetail.id });
//         } catch (e:any) {
//         if (!manager) await queryRunner?.rollbackTransaction();
//         throw new Error(lang.msgErrorFunction(operation, e.message));
//         } finally {
//         if (!manager) await queryRunner?.release();
//         }
//     }